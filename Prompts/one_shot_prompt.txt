===========
TASK
===========

Implement an ontology using the python library owlready2. I have a specification document (csv file) that maps raw data to an OWL conforming ontology including notes on relationships and characteristics. I also have a data sample that can be referenced during development. I also have a statement of my analytics objective and business context. And some general code structure notes. DON'T INCLUDE THE SAMPLE DATA IN THE CODE YOU GENERATE. IT IS JUST THERE FOR REFERENCE

=================
code notes
=================

    * Provide the complete Python code using Owlready2.
    * Include necessary imports.
    * Ensure the code is well-structured, readable, and includes comments.
    * Modularize and separate any helper code (e.g. parsing) from the main code
    * the main function should accept data in the same format as the data sample and output and owl file. 
    * make use of logging, especially at debug level with informative messages at key points in the code
     * Mind that the EquipmentClass must be parsed from the raw data, e.g., EQUIPMENT_NAME:FIPCO009_Filler becomes EquipmentClass:Filler

=========================================
Business Context and Analytics Objective:
=========================================

In the manufacturing domain, the use case involves developing an OWL 2 ontology for a manufacturing execution system to analyze operational data related to equipment and process productivity. The primary analytics objective is to derive actionable insights that lead to improved operational effectiveness by leveraging the principles of our established "Asset Effectiveness Model," which systematically categorizes and quantifies various sources of production time loss (e.g., business external time, unplanned downtime) to ultimately maximize effective run time and enhance key performance indicators such as Asset Utilization and Operating Efficiency. This ontology will provide a structured and semantically rich representation of our manufacturing operations, enabling sophisticated querying and reasoning to pinpoint areas for targeted improvement efforts. It is crucial to understand the flow of production and identify potential bottlenecks across multiple pieces of equipment. For example, if Equipment A is upstream of Equipment B, and Equipment B is upstream of Equipment C, a reasoner can infer that Equipment A is upstream of Equipment C.

==========================================
Asset Effectiveness Model -- for reference
===========================================

The Asset Effectiveness Model is a framework used to analyze and improve the productivity of equipment and manufacturing processes. It works by breaking down the total available time for an asset and identifying the various factors that reduce the amount of time the asset is actually producing effectively.   

The model starts with the concept of "Total Available Time," which is the maximum amount of time an asset could potentially operate (e.g., 24 hours a day, 365 days a year). From this starting point, the model systematically accounts for different categories of time loss:   

ALL TIME VALUES IN RAW DATA ARE REPORTED IN MINUTES (only exception is when column specifies SECONDS) -- this does not apply to datetimes 

Business External Time: This is time lost due to factors outside the control of the plant or production operations.   
Plant Decision Time: This represents time when the plant is not scheduled to run due to management decisions, such as planned shutdowns or lack of orders. Subtracting these losses results in "Plant Available Time".   
Production Available Time: Further time reductions occur due to factors like maintenance, process issues or material shortages.
Unplanned Down Time: This is time lost due to unexpected events like equipment breakdowns or unscheduled maintenance. After accounting for downtime, we arrive at "Run Time".   
Run Time Losses: Even during run time, there can be inefficiencies that reduce effective production, such as slow cycles or reduced yield.   
The ultimate goal is to arrive at "Effective Run Time," which is the time the asset is actually producing good quality output at full capacity.   

To quantify and analyze these time losses, the Asset Effectiveness Model uses several Key Performance Indicators (KPIs):   

Asset Utilization (AU): This is a global metric that measures the percentage of Plant Available Time that is Effective Runtime. It's calculated as (Effective Runtime / Plant Available Time) x 100. AU is often used to set productivity improvement goals and is typically reported monthly.   
Operating Efficiency (OE): This KPI represents how well the operation performed when production wanted the equipment to run. It's calculated as (Effective Runtime / Production Available Time) x 100. OE helps diagnose issues related to maintenance, process, materials, or labor.   
Runtime Efficiency (RE): This measures how well the equipment performed specifically during the time it was supposed to be running. It's calculated as (Effective Runtime / Runtime) x 100. RE helps monitor trends in line throughput and quality.   
Asset Effectiveness (AE): Calculated as (Effective Runtime / Total Available Time) x 100. This metric is monitored over longer periods but is less commonly used than Asset Utilization.   
In essence, the Asset Effectiveness Model provides a structured way to understand where production time is being lost, enabling targeted improvement efforts to maximize asset productivity.

=============================
Input Data and Specifications
=============================
* **Ontology Specification CSV File:** The specification is provided in the attached CSV file "OPERA_ISA95_OWL_ONT_RICH.csv".
    * This file contains the following columns:
        * `Logical Group`:  Groups related ontology elements.
        * `Raw Data Column Name`:  The name of the column in the raw data (if applicable).
        * `Proposed OWL Entity`:  The name of the OWL class.
        * `Proposed OWL Property`:  The name of the OWL property.
        * `OWL Property Type`:  The type of the OWL property (DatatypeProperty or ObjectProperty).
        * `Target/Range (xsd:) / Target Class`:  The target class for ObjectProperties or the data type (xsd:) for DatatypeProperties.
        * `OWL Property Characteristics`:  Characteristics of the property (e.g., Functional).
        * `Inverse Property`:  The inverse property (if applicable).
        * `Domain`: The domain of the property (the class to which the property belongs).
        * `Property Restrictions`:  Any restrictions on the property.
        * `ISA-95 Concept`:  The corresponding ISA-95 concept.
        * `Notes/Considerations`:  Additional notes.

================================
begin ontology specification csv
================================       

Logical Group,Raw Data Column Name,Proposed OWL Entity,Proposed OWL Property,OWL Property Type,Target/Range (xsd:) / Target Class,OWL Property Characteristics,Inverse Property,Domain,Property Restrictions,ISA-95 Concept,Notes/Considerations
Asset Hierarchy,PLANT,Plant,plantId,DatatypeProperty,xsd:string,Functional,,Plant,,Enterprise/Site ID,Used to create/identify Plant Individual - harmonized with B2MML terminology.
Asset Hierarchy,GH_FOCUSFACTORY,Area,areaId,DatatypeProperty,xsd:string,Functional,,Area,,Area ID,Used to create/identify Area Individual. Links via locatedInPlant to Plant.
Asset Hierarchy,PHYSICAL_AREA,ProcessCell,processCellId,DatatypeProperty,xsd:string,Functional,,ProcessCell,,Area/ProcessCell ID,Links via partOfArea to Area.
Asset Hierarchy,LINE_NAME,ProductionLine,lineId,DatatypeProperty,xsd:string,Functional,,ProductionLine,,ProductionLine/ProcessCell ID,Links via locatedInProcessCell to ProcessCell.
Asset Hierarchy,EQUIPMENT_ID,Equipment,equipmentId,DatatypeProperty,xsd:string,Functional,,Equipment,,Equipment ID,Preferred ID for Equipment Individual. Links via isPartOfProductionLine to ProductionLine.
Asset Hierarchy,EQUIPMENT_NAME,Equipment,equipmentName,DatatypeProperty,xsd:string,-,,Equipment,,Equipment Description,Secondary ID. Used to determine EquipmentClass. Consider rdfs:label.
Asset Hierarchy,EQUIPMENT_TYPE,EventRecord,involvesResource,ObjectProperty,ProductionLine | Equipment,,isInvolvedIn,ProcessSegment,min 1,SegmentResponse Resource,Maps to Operations Record Information (Section 5.10). Define inverse? (e.g. resourceInvolvedIn)
Equipment Class,EQUIPMENT_NAME (parsed),EquipmentClass,equipmentClassId,DatatypeProperty,xsd:string,Functional,,EquipmentClass,,EquipmentClass ID,Parse from EQUIPMENT_NAME to create appropriate EquipmentClass.
Equipment Class,N/A,Equipment,memberOfClass,ObjectProperty,EquipmentClass,Functional,hasInstance,Equipment,,EquipmentClass Hierarchy,Links Equipment instances to their EquipmentClass. Define inverse? (e.g. classMember)
Equipment Attributes,EQUIPMENT_MODEL,Equipment,equipmentModel,DatatypeProperty,xsd:string,Functional,,Equipment,,Equipment Property/Model,Property of Equipment according to Section 5.5.
Equipment Attributes,COMPLEXITY,Equipment,complexity,DatatypeProperty,xsd:string,-,,Equipment,,Equipment Property,Property of Equipment according to Section 5.5.
Equipment Attributes,MODEL,Equipment,alternativeModel,DatatypeProperty,xsd:string,-,,Equipment,,Equipment Property,Property of Equipment according to Section 5.5.
Equipment Capability,N/A,EquipmentCapability,capabilityType,DatatypeProperty,xsd:string,Functional,,EquipmentCapability,,Operations Capability,Added for Section 6.4 Operations Capability. Identifier for the capability type.
Equipment Capability,N/A,Equipment,hasCapability,ObjectProperty,EquipmentCapability,,isCapabilityOf,Equipment,,Operations Capability,Links Equipment to capabilities per Section 6.4. Define inverse? (e.g. capabilityOf)
Material & Prod Order,MATERIAL_ID,Material,materialId,DatatypeProperty,xsd:string,Functional,,Material,,MaterialDefinition ID,Used to create/identify Material Individual per Section 5.7.
Material & Prod Order,SHORT_MATERIAL_ID,Material,materialDescription,DatatypeProperty,xsd:string,-,,Material,,MaterialDefinition Description,Property of Material per Section 5.7. Consider rdfs:comment.
Material & Prod Order,SIZE_TYPE,Material,sizeType,DatatypeProperty,xsd:string,-,,Material,,Material Property,Property of Material per Section 5.7.
Material & Prod Order,MATERIAL_UOM,Material,materialUOM,DatatypeProperty,xsd:string,Functional,,Material,,MaterialDefinition BaseUnitOfMeasure,Property of Material per Section 5.7. (Functional per Material instance)
Material & Prod Order,"UOM_ST, UOM_ST_SAP",Material,standardUOM,DatatypeProperty,xsd:string,Functional,,Material,,Material Property (UoM),Property of Material per Section 5.7. (Functional per Material instance)
Material & Prod Order,TP_UOM,Material,targetProductUOM,DatatypeProperty,xsd:string,Functional,,Material,,Material Property (UoM),Property of Material per Section 5.7. (Functional per Material instance)
Material & Prod Order,PRIMARY_CONV_FACTOR,Material,conversionFactor,DatatypeProperty,xsd:decimal,Functional,,Material,,Material Property,Property of Material per Section 5.7. (Functional per Material instance context)
Material & Prod Order,PRODUCTION_ORDER_ID,ProductionRequest,requestId,DatatypeProperty,xsd:string,Functional,,ProductionRequest,,OperationsRequest ID,Used to create/identify ProductionRequest per Section 6.1.
Material & Prod Order,PRODUCTION_ORDER_DESC,ProductionRequest,requestDescription,DatatypeProperty,xsd:string,-,,ProductionRequest,,OperationsRequest Desc,Property of ProductionRequest per Section 6.1.
Material & Prod Order,PRODUCTION_ORDER_RATE,ProductionRequest,requestRate,DatatypeProperty,xsd:decimal,Functional,,ProductionRequest,,OperationsRequest Prop,Property of ProductionRequest per Section 6.1. (Functional per Request instance)
Material & Prod Order,PRODUCTION_ORDER_UOM,ProductionRequest,requestRateUOM,DatatypeProperty,xsd:string,Functional,,ProductionRequest,,OperationsRequest Prop,Property of ProductionRequest per Section 6.1. (Functional per Request instance)
Process Segments,N/A,ProcessSegment,segmentId,DatatypeProperty,xsd:string,Functional,,ProcessSegment,,ProcessSegment ID,Added for Section 5.8 Process Segment Information.
Process Segments,N/A,ProcessSegment,segmentDescription,DatatypeProperty,xsd:string,-,,ProcessSegment,,ProcessSegment Description,Property of ProcessSegment per Section 5.8.
Process Segments,N/A,EventRecord,implementsSegment,ObjectProperty,ProcessSegment,-,,EventRecord,,ProcessSegment Link,Links EventRecord to ProcessSegment per Section 5.8. Define inverse? (e.g. implementedByEvent)
Time & Schedule,JOB_START_TIME_LOC,TimeInterval,startTime,DatatypeProperty,xsd:dateTime,Functional,,TimeInterval,,SegmentResponse StartTime,EventRecord links via occursDuring to TimeInterval. (Functional per TimeInterval instance)
Time & Schedule,JOB_END_TIME_LOC,TimeInterval,endTime,DatatypeProperty,xsd:dateTime,Functional,,TimeInterval,,SegmentResponse EndTime,Part of the TimeInterval linked by EventRecord. (Functional per TimeInterval instance)
Time & Schedule,SHIFT_NAME,Shift,shiftId,DatatypeProperty,xsd:string,Functional,,Shift,,PersonnelSchedule ID,EventRecord links via duringShift to Shift.
Time & Schedule,SHIFT_START_DATE_LOC,Shift,shiftStartTime,DatatypeProperty,xsd:dateTime,Functional,,Shift,,PersonnelSchedule StartTime,Property of Shift per Personnel model. (Functional per Shift instance)
Time & Schedule,SHIFT_END_DATE_LOC,Shift,shiftEndTime,DatatypeProperty,xsd:dateTime,Functional,,Shift,,PersonnelSchedule EndTime,Property of Shift per Personnel model. (Functional per Shift instance)
Time & Schedule,SHIFT_DURATION_MIN,Shift,shiftDurationMinutes,DatatypeProperty,xsd:decimal,Functional,,Shift,,PersonnelSchedule Duration,Property of Shift per Personnel model. (Functional per Shift instance)
Time & Schedule,CREW_ID,PersonnelClass,personnelClassId,DatatypeProperty,xsd:string,Functional,,PersonnelClass,,PersonnelClass ID,Added to align with Section 5.4 Personnel model.
Time & Schedule,N/A,Person,personId,DatatypeProperty,xsd:string,Functional,,Person,,Person ID,Added for Section 5.4 Personnel model.
Time & Schedule,N/A,Person,memberOfPersonnelClass,ObjectProperty,PersonnelClass,-,,Person,,PersonnelClass Link,Links Person to PersonnelClass per Section 5.4. Define inverse? (e.g. personnelClassMember)
Time & Schedule,N/A,EventRecord,performedBy,ObjectProperty,Person,-,,EventRecord,,Personnel Link,Links EventRecord to Person per Section 5.4. Define inverse? (e.g.
Time & Schedule,RAMPUP_FLAG,EventRecord,rampUpFlag,DatatypeProperty,xsd:boolean,Functional,,EventRecord,,OperationsResponse Property,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Utilization State/Reason,UTIL_STATE_DESCRIPTION,OperationalState,stateDescription,DatatypeProperty,xsd:string,-,,OperationalState,,OperationsRecord State,Maps to Ops Record Information (Section 5.10). Consider linking EventRecord to OperationalState instance via ObjectProperty.
Utilization State/Reason,UTIL_REASON_DESCRIPTION,OperationalReason,reasonDescription,DatatypeProperty,xsd:string,-,,OperationalReason,,OperationsEvent Reason,Maps to Ops Event Information (Section 5.11). Consider linking EventRecord to OperationalReason instance via ObjectProperty.
Utilization State/Reason,UTIL_ALT_LANGUAGE_REASON,OperationalReason,altReasonDescription,DatatypeProperty,xsd:string (with lang tag),-,,OperationalReason,,OperationsEvent Description,Property of OperationalReason per Section 5.11.
Utilization State/Reason,DOWNTIME_DRIVER,OperationalReason,downtimeDriver,DatatypeProperty,xsd:string,-,,OperationalReason,,OperationsEvent Category,Property of OperationalReason per Section 5.11.
Utilization State/Reason,OPERA_TYPE,EventRecord,operationType,DatatypeProperty,xsd:string,-,,EventRecord,,OperationsRecord Type,Property of EventRecord per Section 5.10. Categorical.
Utilization State/Reason,"CO_TYPE, CO_ORIGINAL_TYPE",OperationalReason,changeoverType,DatatypeProperty,xsd:string,-,,OperationalReason,,OperationsEvent Detail,Property of OperationalReason for changeover events. Categorical.
Performance Metrics,TOTAL_TIME,EventRecord,reportedDurationMinutes,DatatypeProperty,xsd:decimal,Functional,,EventRecord,,OperationsPerformance Duration,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Performance Metrics,BUSINESS_EXTERNAL_TIME,EventRecord,businessExternalTimeMinutes,DatatypeProperty,xsd:decimal,Functional,,EventRecord,,OperationsPerformance Parameter,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Performance Metrics,PLANT_AVAILABLE_TIME,EventRecord,plantAvailableTimeMinutes,DatatypeProperty,xsd:decimal,Functional,,EventRecord,,OperationsPerformance Parameter,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Performance Metrics,EFFECTIVE_RUNTIME,EventRecord,effectiveRuntimeMinutes,DatatypeProperty,xsd:decimal,Functional,,EventRecord,,OperationsPerformance Parameter,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Performance Metrics,PLANT_DECISION_TIME,EventRecord,plantDecisionTimeMinutes,DatatypeProperty,xsd:decimal,Functional,,EventRecord,,OperationsPerformance Parameter,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Performance Metrics,PRODUCTION_AVAILABLE_TIME,EventRecord,productionAvailableTimeMinutes,DatatypeProperty,xsd:decimal,Functional,,EventRecord,,OperationsPerformance Parameter,Property of EventRecord per Section 6.3. (Functional per EventRecord instance)
Transaction Elements,N/A,TransactionModel,transactionType,DatatypeProperty,xsd:string,-,,TransactionModel,,Transaction Type,Added for Section 3 Transaction Definitions.
Transaction Elements,N/A,TransactionModel,applicationArea,ObjectProperty,ApplicationArea,-,,TransactionModel,,Transaction Application Area,Added for Section 3.1.19 Standard Transaction Element Structure.
Transaction Elements,N/A,TransactionModel,dataArea,ObjectProperty,DataArea,-,,TransactionModel,,Transaction Data Area,Added for Section 3.1.19 Standard Transaction Element Structure.
Equipment Sequence,N/A,EquipmentClass,isUpstreamOf,ObjectProperty,EquipmentClass,"Transitive, Asymmetric",isDownstreamOf,EquipmentClass,,Equipment Hierarchy/Topology,Defines upstream relationship between equipment classes. Needs inverseOf: isDownstreamOf
Equipment Sequence,N/A,EquipmentClass,isDownstreamOf,ObjectProperty,EquipmentClass,"Transitive, Asymmetric",isUpstreamOf,EquipmentClass,,Equipment Hierarchy/Topology,Defines downstream relationship between equipment classes.
Equipment Sequence,N/A,EquipmentClass,isParallelWith,ObjectProperty,EquipmentClass,"Symmetric, Irreflexive",,EquipmentClass,,Equipment Hierarchy/Topology,Defines equipment classes that operate in parallel.
Equipment Sequence,N/A,EquipmentClass,defaultSequencePosition,DatatypeProperty,xsd:integer,Functional,,EquipmentClass,,Equipment Hierarchy/Topology,Optional numerical position in default sequence (1-based). Functional per class in sequence context.
Equipment Sequence,N/A,Equipment,isUpstreamOf,ObjectProperty,Equipment,"Transitive, Asymmetric",isDownstreamOf,Equipment,,Equipment Hierarchy Instance,Instance-level relationship. Needs inverseOf: isDownstreamOf. Transitivity often inferred/applied via class or sequence logic.
Equipment Sequence,N/A,Equipment,isDownstreamOf,ObjectProperty,Equipment,"Transitive, Asymmetric",isUpstreamOf,Equipment,,Equipment Hierarchy Instance,Instance-level relationship. Transitivity often inferred/applied via class or sequence logic.
Equipment Sequence,N/A,Equipment,isParallelWith,ObjectProperty,Equipment,"Symmetric, Irreflexive",,Equipment,,Equipment Hierarchy Instance,Instance-level relationship. Mirrors class property.
Equipment Sequence,N/A,Equipment,actualSequencePosition,DatatypeProperty,xsd:integer,Functional,,Equipment,,Equipment Hierarchy Instance,Actual position in sequence for this specific line configuration. Functional per equipment instance in sequence.
Equipment Sequence,N/A,ProductionLine,hasSequenceDefinition,ObjectProperty,SequenceDefinition,-,,ProductionLine,,Equipment Hierarchy Context,Links a line to its defined equipment sequence. Define inverse? (e.g. sequenceForLine)
Equipment Sequence,N/A,SequenceDefinition,sequenceId,DatatypeProperty,xsd:string,Functional,,SequenceDefinition,,Equipment Hierarchy Context,Unique identifier for a sequence definition.
Equipment Sequence,N/A,SequenceDefinition,sequenceDescription,DatatypeProperty,xsd:string,-,,SequenceDefinition,,Equipment Hierarchy Context,Description of the sequence purpose/configuration.
Equipment Sequence,N/A,SequenceSegment,segmentId,DatatypeProperty,xsd:string,Functional,,SequenceSegment,,Process Segment Sequence,Unique identifier for a sequence segment within a sequence.
Equipment Sequence,N/A,SequenceSegment,previousSegment,ObjectProperty,SequenceSegment,"Functional, Asymmetric",nextSegment,SequenceSegment,,Process Segment Sequence,Links to previous segment. Functional assumes simple linear sequence for this direct link.
Equipment Sequence,N/A,SequenceSegment,nextSegment,ObjectProperty,SequenceSegment,"Functional, Asymmetric",previousSegment,SequenceSegment,,Process Segment Sequence,Links to next segment. Functional assumes simple linear sequence for this direct link.
Equipment Sequence,N/A,SequenceSegment,hasParallelPaths,ObjectProperty,SequenceSegment,-,,SequenceSegment,,Process Segment Sequence,Links to parallel segments. Use for branching/joining. Define inverse/

==============================
end ontology specification csv
==============================

======================================
begin data sample (csv) -- fo reference only
======================================

LINE_NAME,EQUIPMENT_NAME,EQUIPMENT_ID,PLANT,DOWNTIME_DRIVER,OPERA_TYPE,GH_AREA,GH_CATEGORY,GH_FOCUSFACTORY,PHYSICAL_AREA,EQUIPMENT_TYPE,EQUIPMENT_MODEL,COMPLEXITY,MODEL,MATERIAL_ID,SHORT_MATERIAL_ID,SIZE_TYPE,MATERIAL_UOM,UOM_ST,UOM_ST_SAP,TP_UOM,PRODUCTION_ORDER_ID,PRODUCTION_ORDER_DESC,PRODUCTION_ORDER_RATE,PRODUCTION_ORDER_UOM,JOB_START_TIME_LOC,JOB_END_TIME_LOC,UTIL_STATE_DESCRIPTION,UTIL_REASON_DESCRIPTION,UTIL_ALT_LANGUAGE_REASON,CO_TYPE,CO_ORIGINAL_TYPE,SHIFT_NAME,SHIFT_START_DATE_LOC,SHIFT_END_DATE_LOC,SHIFT_DURATION_MIN,CREW_ID,RAMPUP_FLAG,PRODUCTIONDATE_DAY_LOC,PRODUCTIONDATE_MONTH_LOC,PRODUCTIONDATE_QUARTER_LOC,PRODUCTIONDATE_YEAR_LOC,PRIMARY_CONV_FACTOR,PLANT_DESCRIPTION,PLANT_STRATEGIC_LOCATION,PLANT_COUNTRY,PLANT_COUNTRY_DESCRIPTION,PLANT_FACILITY_TYPE,PLANT_POSTAL_CODE,PLANT_PURCHASING_ORGANIZATION,PLANT_STRATEGIC_LOCATION_DESCRIPTION,PLANT_LATITUDE,PLANT_LONGITUDE,PLANT_DIVISION,PLANT_DIVISION_DESCRIPTION,PLANT_SUB_DIVISION,PLANT_SUB_DIVISION_DESCRIPTION,AE_MODEL_CATEGORY,TOTAL_TIME_SECONDS,TOTAL_TIME,BUSINESS_EXTERNAL_TIME,PLANT_AVAILABLE_TIME,EFFECTIVE_RUNTIME,PLANT_DECISION_TIME,PRODUCTION_AVAILABLE_TIME,GOOD_PRODUCTION_QTY,REJECT_PRODUCTION_QTY,DOWNTIME,RUN_TIME,NOT_ENTERED,WAITING_TIME,PLANT_EXPERIMENTATION,ALL_MAINTENANCE,AUTONOMOUS_MAINTENANCE,PLANNED_MAINTENANCE,DAYS_MTD,DAYS_YTD,AVG_THROUGHPUT_MTD,AVG_THROUGHPUT_YTD,CHANGEOVER_COUNT,CHANGEOVER_DURATION,CLEANING_AND_SANITIZATION,LUNCH_AND_BREAK,LUNCH,BREAK,MEETING_AND_TRAINING,NO_DEMAND,SOURCE_DATASET,SOURCE_DATASET_FUNCTIONAL_AREA,SOURCE_DATASET_SUBFUNCTIONAL_AREA
FIPCO006,FIPCO006,224.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Kids,TFS30,000000000061024733,61024733,OFT 38FR_4.6oz_12_Size,CS,12.0,12.0,12.0,108432658.0,108432658.0,12.0,CS,2025-02-05 22:40:21.000 -0500,2025-02-09 00:26:51.000 -0500,DOWNTIME,Ending order,Terminando Orden,Size,,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,7,0.116667,0.0,0.116667,0.0,0.0,0.116667,0,0,0.116667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Filler,152.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05316A,MX05316A,OFT 38FR_4.0oz_24_Size,CS,24.0,24.0,24.0,108430841.0,108430841.0,450.0,CS,2025-02-05 09:02:46.000 -0500,2025-02-06 14:17:21.000 -0500,DOWNTIME,Copas,Copas,ALL,ALL,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,747,12.45,0.0,12.45,0.0,0.0,12.45,0,0,12.45,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO006,FIPCO006_Filler,225.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Kids,TFS30,MX03109A,MX03109A,OFT 38TP_75ml_12_Size,CS,12.0,12.0,12.0,108430287.0,108430287.0,144.0,CS,2025-02-05 20:12:40.000 -0500,2025-02-05 20:13:31.000 -0500,PLANNED,Cleaning and Sanitation,C&S,Size,Size,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,1255,20.916667,0.0,20.916667,0.0,20.916667,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,20.916667,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G_CasePacker,193.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061028649,61028649,OFT 35FT_115ml_36_2P_Size,CS,72.0,72.0,72.0,108431439.0,108431439.0,5.829999924,CS,2025-02-05 19:17:20.000 -0500,,DOWNTIME,Entrada plegadiza CCC,Entrada plegadiza CCC,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,153,2.55,0.0,2.55,0.0,0.0,2.55,0,0,2.55,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,210.0,CS,2025-02-07 02:17:18.000 -0500,2025-02-08 03:28:39.000 -0500,PLANNED,Cleaning and Sanitation,C&S,ALL,ALL,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,849,14.15,0.0,14.15,0.0,14.15,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,14.15,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_CasePacker,146.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,000000000000151105,151105,OFT 25FZ_2.5oz_24_Size,CS,24.0,24.0,24.0,108433946.0,108433946.0,18.75,CS,2025-02-07 14:04:19.000 -0500,2025-02-09 20:23:49.000 -0500,RUNNING,Running,Corriendo,Product,Product,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,9343,155.716666,0.0,155.716666,0.0,0.0,155.716666,0,0,0.0,155.716666,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_CasePacker,165.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX03180C,FMX03180C,OFT 32FT_100ml_72_Size,CS,72.0,72.0,72.0,108429892.0,108429892.0,6.079999924,CS,2025-02-05 00:08:14.000 -0500,2025-02-06 22:02:41.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,114.638159333,0.0,0.0,697,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,36.684210526,8.935897436,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO001,FIPCO001_CasePacker2,309.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX03924A,MX03924A,OFT 25FT_50ml_144_Size,CS,144.0,144.0,144.0,108429891.0,108429891.0,3.130000114,CS,2025-02-04 15:21:14.000 -0500,,BUSINESS EXTERNAL,No Demand,No Demanda,Product,,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,144.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Business External,27042,450.7,450.7,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,450.7,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002,162.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Secondary Line,TFS80-6,FMX00035B,FMX00035B,OFT 38FT_150ml_72_Size,CS,72.0,72.0,72.0,108432977.0,108432977.0,5.42,CS,2025-02-06 22:02:43.000 -0500,2025-02-06 22:59:03.000 -0500,DOWNTIME,Ending order,Terminando Orden,Size,Size,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,262,4.366667,0.0,4.366667,0.0,0.0,4.366667,0,0,4.366667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,210.0,CS,2025-02-07 02:17:18.000 -0500,2025-02-08 03:28:39.000 -0500,DOWNTIME,Cinta de descarga,Cinta de descarga,ALL,ALL,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,49,0.816667,0.0,0.816667,0.0,0.0,0.816667,0,0,0.816667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Cartoner,164.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX00035B,FMX00035B,OFT 38FT_150ml_72_Size,CS,72.0,72.0,72.0,108432977.0,108432977.0,390.0,CS,2025-02-06 22:03:12.000 -0500,2025-02-06 22:59:08.000 -0500,WAITING,Upstream,Falta Producto,Size,Size,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,196,3.266666,0.0,3.266666,0.0,0.0,3.266666,0,0,0.0,0.0,0.0,3.266666,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Bundler,177.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000151114,151114,OFT 35FT_4.0oz_24_Size,CS,24.0,24.0,24.0,108432723.0,108432723.0,450.0,CS,2025-02-06 06:52:20.000 -0500,2025-02-06 20:14:53.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,13056,217.600001,0.0,217.600001,0.0,0.0,217.600001,0,0,0.0,217.600001,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Filler,166.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX00035B,FMX00035B,OFT 38FT_150ml_72_Size,CS,72.0,72.0,72.0,108433722.0,108433722.0,390.0,CS,2025-02-06 23:03:27.000 -0500,,PLANNED,Meeting,Junta,Size,Size,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,711,11.85,0.0,11.85,0.0,11.85,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,11.85,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Cartoner,178.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000156755,156755,OFT 35FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108430289.0,108430289.0,450.0,CS,2025-02-05 00:04:30.000 -0500,2025-02-05 16:37:35.000 -0500,DOWNTIME,Paro operador,Paro operador,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,49,0.816667,0.0,0.816667,0.0,0.0,0.816667,0,0,0.816667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Filler,180.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000151406,151406,OFT 35FT_4.0oz_24_Size,CS,24.0,24.0,24.0,108433622.0,108433622.0,450.0,CS,2025-02-06 20:15:08.000 -0500,2025-02-07 13:06:17.000 -0500,CHANGE OVER,Product,Producto,Product,Product,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,2117,35.283333,0.0,35.283333,0.0,35.283333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,1,35.283333,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_Filler,143.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,000000000000151106,151106,OFT 25FZ_2.5oz_24_Size,CS,24.0,24.0,24.0,108433945.0,108433945.0,450.0,CS,2025-02-07 00:07:52.000 -0500,2025-02-07 13:58:36.000 -0500,CHANGE OVER,Product,Producto,Size,Size,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,509,8.483333,0.0,8.483333,0.0,8.483333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G_Cartoner,192.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061028649,61028649,OFT 35FT_115ml_36_2P_Size,CS,72.0,72.0,72.0,108431439.0,108431439.0,210.0,CS,2025-02-05 19:17:20.000 -0500,,WAITING,Downstream,Acumulación,ALL,ALL,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,1362,22.700001,0.0,22.700001,0.0,0.0,22.700001,0,0,0.0,0.0,0.0,22.700001,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00F,FIPCO00F_Cartoner,185.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,FMX03179D,FMX03179D,OFT 28FT_75ml_72_Size,CS,72.0,72.0,72.0,108430290.0,108430290.0,450.0,CS,2025-02-05 04:12:19.000 -0500,2025-02-07 13:20:31.000 -0500,WAITING,Upstream,Falta Producto,Product,Product,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,2907,48.450002,0.0,48.450002,0.0,0.0,48.450002,0,0,0.0,0.0,0.0,48.450002,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Bundler,205.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,210.0,CS,2025-02-07 02:17:18.000 -0500,2025-02-08 03:28:39.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,4807,80.116666,0.0,80.116666,0.0,0.0,80.116666,0,0,0.0,80.116666,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Palletizer,181.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000151114,151114,OFT 35FT_4.0oz_24_Size,CS,24.0,24.0,24.0,108432723.0,108432723.0,18.75,CS,2025-02-06 06:52:21.000 -0500,2025-02-06 20:14:53.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,196.0,0.0,0.0,3675,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,193.421052632,47.115384615,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003_Cartoner,171.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061001979,61001979,OFT 38FR_100ml_72_Size,CS,72.0,72.0,72.0,108427066.0,108427066.0,450.0,CS,2025-02-04 17:47:52.000 -0500,2025-02-05 10:18:42.000 -0500,DOWNTIME,Paro en Empaque,Paro En Empaque,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,1223,20.383334,0.0,20.383334,0.0,0.0,20.383334,0,0,20.383334,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00H,FIPCO00H_CasePacker,200.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX05611,FMX05611,OFT 35FT_125ml_48_Size,CS,48.0,48.0,48.0,108430843.0,108430843.0,9.380000114,CS,2025-02-05 03:02:04.000 -0500,2025-02-06 09:33:24.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,52.98507398,0.0,0.0,497,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,26.157894737,6.371794872,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Bundler,205.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,402.0,CS,2025-02-05 04:56:58.000 -0500,2025-02-07 02:16:42.000 -0500,CHANGE OVER,ALL,Todo,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,2269,37.816667,0.0,37.816667,0.0,37.816667,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Filler,152.0,MX11,Breakdown,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05316A,MX05316A,OFT 38FR_4.0oz_24_Size,CS,24.0,24.0,24.0,108430841.0,108430841.0,450.0,CS,2025-02-05 09:02:46.000 -0500,2025-02-06 14:17:21.000 -0500,COMMON DOWNTIMES,Other,Otros,ALL,ALL,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,629,10.483333,0.0,10.483333,0.0,0.0,10.483333,0,0,10.483333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_CasePacker,151.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061045447,61045447,OFT 38FR_170ml_24 Size,CS,24.0,24.0,24.0,108432764.0,108432764.0,16.75,CS,2025-02-06 14:17:53.000 -0500,2025-02-08 01:08:30.000 -0500,DOWNTIME,Cadena de avance,Cadena de avance,ALL,ALL,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,88,1.466667,0.0,1.466667,0.0,0.0,1.466667,0,0,1.466667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Filler,152.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05316A,MX05316A,OFT 38FR_4.0oz_24_Size,CS,24.0,24.0,24.0,108430841.0,108430841.0,450.0,CS,2025-02-05 09:02:46.000 -0500,2025-02-06 14:17:21.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,4841,80.683335,0.0,80.683335,0.0,0.0,80.683335,0,0,0.0,80.683335,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00J,FIPCO00J_Filler,769.0,MX11,Breakdown,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061012223,61012223,OFT 28FT_60ml_24_3P_Size,CS,72.0,72.0,72.0,108427065.0,108427065.0,450.0,CS,2025-02-05 07:07:27.000 -0500,,DOWNTIME,paro operador,Paro operador,ALL,ALL,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,108,1.799999,0.0,1.799999,0.0,0.0,1.799999,0,0,1.799999,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,402.0,CS,2025-02-05 04:56:58.000 -0500,2025-02-07 02:16:42.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,10312,171.866667,0.0,171.866667,0.0,0.0,171.866667,0,0,0.0,171.866667,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Cartoner,178.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000151093,151093,OFT 35FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108431438.0,108431438.0,450.0,CS,2025-02-05 16:38:05.000 -0500,2025-02-06 06:51:16.000 -0500,RUNNING,Running,Corriendo,Product,Product,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,3299,54.983334,0.0,54.983334,0.0,0.0,54.983334,0,0,0.0,54.983334,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00H,FIPCO00H_CasePacker,200.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,MX02080D,MX02080D,OFT 35FR_75ml_48_Size,CS,48.0,48.0,48.0,108432978.0,108432978.0,9.380000114,CS,2025-02-06 09:34:17.000 -0500,2025-02-07 13:38:44.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,208.31556249,0.0,0.0,1954,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,102.842105263,25.051282051,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_Cartoner,145.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX07159A,MX07159A,OFT 25FT_2.2oz_24_Size,CS,24.0,24.0,24.0,108429893.0,108429893.0,450.0,CS,2025-02-06 06:08:36.000 -0500,2025-02-07 00:07:28.000 -0500,PLANNED,Cleaning and Sanitation,C&S,Product,Product,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,426,7.1,0.0,7.1,0.0,7.1,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,7.1,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_Bundler,144.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX06994A,MX06994A,OFT_25FT_2.0oz_24_Size,CS,24.0,24.0,24.0,108432488.0,108432488.0,450.0,CS,2025-02-05 18:14:56.000 -0500,2025-02-06 06:08:02.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,34.631111111,0.0,0.0,15584,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,820.210526316,199.794871795,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_CasePacker,151.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061044255,61044255,OFT 38FR_120ml_24_Size,CS,24.0,24.0,24.0,108430288.0,108430288.0,18.75,CS,2025-02-04 16:06:17.000 -0500,2025-02-05 09:01:41.000 -0500,WAITING,Downstream,Acumulación,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,295,4.916667,0.0,4.916667,0.0,0.0,4.916667,0,0,0.0,0.0,0.0,4.916667,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO001,FIPCO001_Filler,159.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,000000000061039400,61039400,OFT 25FT_50ml_144_Size,CS,144.0,144.0,144.0,108435845.0,108435845.0,450.0,CS,2025-02-07 20:02:50.000 -0500,2025-02-10 07:14:24.000 -0500,COMMON DOWNTIMES,Lack of Cream / Change Feeding,Falta de crema/Cambio alimentación,Product,Product,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,144.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,734,12.233333,0.0,12.233333,0.0,0.0,12.233333,0,0,12.233333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00H,FIPCO00H_CasePacker,200.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,MX02080D,MX02080D,OFT 35FR_75ml_48_Size,CS,48.0,48.0,48.0,108432978.0,108432978.0,9.380000114,CS,2025-02-06 09:34:17.000 -0500,2025-02-07 13:38:44.000 -0500,PLANNED,Cleaning and Sanitation,C&S,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,587,9.783333,0.0,9.783333,0.0,9.783333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,9.783333,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Filler,208.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,402.0,CS,2025-02-05 04:56:58.000 -0500,2025-02-07 02:16:42.000 -0500,DOWNTIME,Ending order,Terminando Orden,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,18,0.3,0.0,0.3,0.0,0.0,0.3,0,0,0.3,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Filler,152.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061044255,61044255,OFT 38FR_120ml_24_Size,CS,24.0,24.0,24.0,108430288.0,108430288.0,450.0,CS,2025-02-04 16:06:17.000 -0500,2025-02-05 09:01:41.000 -0500,DOWNTIME,Nivel de tanque A B C,Nivel de tanque A B C,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,258,4.3,0.0,4.3,0.0,0.0,4.3,0,0,4.3,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003,169.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,MX05532A,MX05532A,OFT 38FR_125ml_48_Size,CS,48.0,48.0,48.0,108433621.0,108433621.0,9.38,CS,2025-02-06 18:16:14.000 -0500,2025-02-08 00:18:07.000 -0500,DOWNTIME,Filler,LLenadora,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,2818,46.966667,0.0,46.966667,0.0,0.0,46.966667,0,0,46.966667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,402.0,CS,2025-02-05 04:56:58.000 -0500,2025-02-07 02:16:42.000 -0500,DOWNTIME,Sistema de cola,Sistema de cola,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,824,13.733334,0.0,13.733334,0.0,0.0,13.733334,0,0,13.733334,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Bundler,149.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061045447,61045447,OFT 38FR_170ml_24 Size,CS,24.0,24.0,24.0,108432764.0,108432764.0,402.0,CS,2025-02-06 14:17:55.000 -0500,2025-02-08 01:08:30.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,18965,316.083336,0.0,316.083336,0.0,0.0,316.083336,0,0,0.0,316.083336,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I,204.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,17.5,CS,2025-02-07 02:16:44.000 -0500,2025-02-08 03:28:26.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,4515,75.249998,0.0,75.249998,0.0,0.0,75.249998,0,0,0.0,75.249998,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00F,FIPCO00F_Filler,187.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,FMX03179D,FMX03179D,OFT 28FT_75ml_72_Size,CS,72.0,72.0,72.0,108430290.0,108430290.0,450.0,CS,2025-02-05 04:12:19.000 -0500,2025-02-07 13:20:32.000 -0500,RUNNING,Running,Corriendo,Product,Product,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,22814,380.233334,0.0,380.233334,0.0,0.0,380.233334,0,0,0.0,380.233334,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I,204.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,16.75,CS,2025-02-05 04:56:34.000 -0500,2025-02-07 02:16:31.000 -0500,DOWNTIME,Bundler,Empaquetadora,Product,Product,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,2228,37.133331,0.0,37.133331,0.0,0.0,37.133331,0,0,37.133331,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00H,FIPCO00H_Filler,201.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX05611,FMX05611,OFT 35FT_125ml_48_Size,CS,48.0,48.0,48.0,108430843.0,108430843.0,450.0,CS,2025-02-05 03:02:04.000 -0500,2025-02-06 09:33:24.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,286.726666667,0.0,0.0,129027,121,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,6790.894736842,1654.192307692,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E,176.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,000000000000151093,151093,OFT 35FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108431438.0,108431438.0,18.75,CS,2025-02-05 16:37:43.000 -0500,2025-02-06 06:51:09.000 -0500,CHANGE OVER,Size,Tamaño,Product,Product,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,2972,49.533333,0.0,49.533333,0.0,49.533333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00J,FIPCO00J_Cartoner,767.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061012223,61012223,OFT 28FT_60ml_24_3P_Size,CS,72.0,72.0,72.0,108427065.0,108427065.0,150.0,CS,2025-02-05 07:07:27.000 -0500,,CHANGE OVER,ALL,Todo,ALL,ALL,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,1174,19.566667,0.0,19.566667,0.0,19.566667,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,1,19.566667,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G_CasePacker,193.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061029036,61029036,OFT 28FT_66ml_36_2P Size,CS,72.0,72.0,72.0,108423546.0,108423546.0,5.829999924,CS,2025-02-05 02:42:16.000 -0500,2025-02-05 19:16:09.000 -0500,PLANNED,Cleaning and Sanitation,C&S,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,918,15.3,0.0,15.3,0.0,15.3,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,15.3,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Cartoner,164.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX03180C,FMX03180C,OFT 32FT_100ml_72_Size,CS,72.0,72.0,72.0,108429892.0,108429892.0,438.0,CS,2025-02-05 00:08:44.000 -0500,2025-02-06 22:02:41.000 -0500,COMMON DOWNTIMES,OutSpec_Tube,FueraEspec_Tubo,Packing,Packing,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,2069,34.483333,0.0,34.483333,0.0,0.0,34.483333,0,0,34.483333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Filler,152.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061045447,61045447,OFT 38FR_170ml_24 Size,CS,24.0,24.0,24.0,108432764.0,108432764.0,402.0,CS,2025-02-06 14:17:45.000 -0500,2025-02-08 01:08:30.000 -0500,WAITING,Downstream,Acumulación,ALL,ALL,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,6868,114.466667,0.0,114.466667,0.0,0.0,114.466667,0,0,0.0,0.0,0.0,114.466667,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G,190.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Packs,TFS80-6,000000000061028649,61028649,OFT 35FT_115ml_36_2P_Size,CS,72.0,72.0,72.0,108431439.0,108431439.0,5.83,CS,2025-02-05 19:16:10.000 -0500,2025-02-08 21:33:56.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,27170,452.833333,0.0,452.833333,0.0,0.0,452.833333,0,0,0.0,452.833333,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Cartoner,164.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX00035B,FMX00035B,OFT 38FT_150ml_72_Size,CS,72.0,72.0,72.0,108433722.0,108433722.0,390.0,CS,2025-02-06 23:03:27.000 -0500,,RUNNING,Running,Corriendo,Size,Size,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,15343,255.716665,0.0,255.716665,0.0,0.0,255.716665,0,0,0.0,255.716665,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_CasePacker,207.0,MX11,Breakdown,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,16.75,CS,2025-02-05 04:56:58.000 -0500,2025-02-07 02:16:42.000 -0500,DOWNTIME,Fallo de Pacrob,Fallo de Pacrob,ALL,ALL,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,141,2.35,0.0,2.35,0.0,0.0,2.35,0,0,2.35,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO001,FIPCO001,155.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Low Complexity,TFS80-6,MX03924A,MX03924A,OFT 25FT_50ml_144_Size,CS,144.0,144.0,144.0,108429891.0,108429891.0,3.13,CS,2025-02-04 15:20:53.000 -0500,2025-02-07 20:02:16.000 -0500,DOWNTIME,Filler,LLenadora,Product,,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,144.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,416,6.933333,0.0,6.933333,0.0,0.0,6.933333,0,0,6.933333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E,176.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,000000000000151093,151093,OFT 35FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108431438.0,108431438.0,18.75,CS,2025-02-05 16:37:43.000 -0500,2025-02-06 06:51:09.000 -0500,DOWNTIME,Filler,LLenadora,Product,Product,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,124,2.066666,0.0,2.066666,0.0,0.0,2.066666,0,0,2.066666,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003,169.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,MX06922A,MX06922A,OFT 38FT_160ml_72_Size,CS,72.0,72.0,72.0,108430838.0,108430838.0,5.58,CS,2025-02-05 10:18:41.000 -0500,2025-02-06 02:19:34.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,167.741935484,0.0,0.0,936,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,49.263157895,12.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003_Cartoner,171.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061001979,61001979,OFT 38FR_100ml_72_Size,CS,72.0,72.0,72.0,108427066.0,108427066.0,450.0,CS,2025-02-04 17:47:52.000 -0500,2025-02-05 10:18:42.000 -0500,DOWNTIME,Falla de operación,Falla de operación,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,366,6.1,0.0,6.1,0.0,0.0,6.1,0,0,6.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Palletizer,181.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000156755,156755,OFT 35FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108430289.0,108430289.0,18.75,CS,2025-02-05 00:04:31.000 -0500,2025-02-05 16:37:35.000 -0500,PLANNED,Cleaning and Sanitation,C&S,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,1514,25.233333,0.0,25.233333,0.0,25.233333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,25.233333,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_CasePacker,151.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05316A,MX05316A,OFT 38FR_4.0oz_24_Size,CS,24.0,24.0,24.0,108430841.0,108430841.0,18.75,CS,2025-02-05 09:02:46.000 -0500,2025-02-06 14:17:21.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,203.146666667,0.0,0.0,3809,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,200.473684211,48.833333333,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Cartoner,164.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX03180C,FMX03180C,OFT 32FT_100ml_72_Size,CS,72.0,72.0,72.0,108429892.0,108429892.0,438.0,CS,2025-02-05 00:08:44.000 -0500,2025-02-06 22:02:41.000 -0500,NOT ENTERED,Unknown,Desconocido,Packing,Packing,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,641,10.683334,0.0,10.683334,0.0,0.0,10.683334,0,0,10.683334,0.0,10.683334,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_CasePacker,165.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX03180C,FMX03180C,OFT 32FT_100ml_72_Size,CS,72.0,72.0,72.0,108429892.0,108429892.0,6.079999924,CS,2025-02-05 00:08:14.000 -0500,2025-02-06 22:02:41.000 -0500,WAITING,Upstream,Falta Producto,Packing,,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,2585,43.083333,0.0,43.083333,0.0,0.0,43.083333,0,0,0.0,0.0,0.0,43.083333,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G,190.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Packs,TFS80-6,000000000061028649,61028649,OFT 35FT_115ml_36_2P_Size,CS,72.0,72.0,72.0,108431439.0,108431439.0,5.83,CS,2025-02-05 19:16:10.000 -0500,2025-02-08 21:33:56.000 -0500,DOWNTIME,Cartoner,Cartonadora,ALL,ALL,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,1188,19.8,0.0,19.8,0.0,0.0,19.8,0,0,19.8,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,210.0,CS,2025-02-07 02:17:18.000 -0500,2025-02-08 03:28:39.000 -0500,DOWNTIME,Sistema de cola,Sistema de cola,ALL,ALL,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,114,1.9,0.0,1.9,0.0,0.0,1.9,0,0,1.9,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G_Cartoner,192.0,MX11,Breakdown,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061028649,61028649,OFT 35FT_115ml_36_2P_Size,CS,72.0,72.0,72.0,108431439.0,108431439.0,210.0,CS,2025-02-05 19:17:20.000 -0500,,DOWNTIME,Error de introducción,Error de introducción,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,293,4.883333,0.0,4.883333,0.0,0.0,4.883333,0,0,4.883333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_Filler,143.0,MX11,Breakdown,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,000000000000151105,151105,OFT 25FZ_2.5oz_24_Size,CS,24.0,24.0,24.0,108433946.0,108433946.0,450.0,CS,2025-02-07 14:04:36.000 -0500,2025-02-09 20:23:49.000 -0500,DOWNTIME,Tubo Atorado en Dedo,Tubo Atorado en Dedo,Product,Product,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,339,5.65,0.0,5.65,0.0,0.0,5.65,0,0,5.65,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003_CasePacker,172.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061049090,61049090,OFT 38FR_170ml_72_Size,CS,72.0,72.0,72.0,108432487.0,108432487.0,5.579999924,CS,2025-02-06 02:20:13.000 -0500,2025-02-06 18:16:15.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,116.129033846,0.0,0.0,648,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,34.105263158,8.307692308,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO006,FIPCO006_CasePacker,227.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Kids,TFS30,000000000061024733,61024733,OFT 38FR_4.6oz_12_Size,CS,12.0,12.0,12.0,108432658.0,108432658.0,12.0,CS,2025-02-05 22:40:53.000 -0500,,PLANNED,Cleaning and Sanitation,C&S,Size,,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,548,9.133333,0.0,9.133333,0.0,9.133333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,9.133333,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00H,FIPCO00H_Cartoner,199.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,MX02355A,MX02355A,OFT 35FR_75ml_48_Size,CS,48.0,48.0,48.0,108435404.0,108435404.0,450.0,CS,2025-02-07 13:39:17.000 -0500,2025-02-08 13:48:17.000 -0500,PLANNED,Cleaning and Sanitation,C&S,Product,Product,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,886,14.766666,0.0,14.766666,0.0,14.766666,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,14.766666,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Cartoner,164.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX00035B,FMX00035B,OFT 38FT_150ml_72_Size,CS,72.0,72.0,72.0,108432977.0,108432977.0,390.0,CS,2025-02-06 22:03:12.000 -0500,2025-02-06 22:59:08.000 -0500,CHANGE OVER,Size,Tamaño,Size,Size,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,1990,33.166667,0.0,33.166667,0.0,33.166667,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,1,33.166667,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00F,FIPCO00F_Bundler,184.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,FMX03179D,FMX03179D,OFT 28FT_75ml_72_Size,CS,72.0,72.0,72.0,108430290.0,108430290.0,450.0,CS,2025-02-05 04:12:19.000 -0500,2025-02-07 13:20:32.000 -0500,BUSINESS EXTERNAL,EMO,EMO,Product,Product,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Business External,16,0.266667,0.266667,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Bundler,149.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061045447,61045447,OFT 38FR_170ml_24 Size,CS,24.0,24.0,24.0,108432764.0,108432764.0,402.0,CS,2025-02-06 14:17:55.000 -0500,2025-02-08 01:08:30.000 -0500,DOWNTIME,Apilador,Apilador,ALL,ALL,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,42,0.7,0.0,0.7,0.0,0.0,0.7,0,0,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Filler,166.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX00035B,FMX00035B,OFT 38FT_150ml_72_Size,CS,72.0,72.0,72.0,108433722.0,108433722.0,390.0,CS,2025-02-06 23:03:27.000 -0500,,WAITING,Downstream,Acumulación,Size,Size,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,7268,121.13333,0.0,121.13333,0.0,0.0,121.13333,0,0,0.0,0.0,0.0,121.13333,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO001,FIPCO001_Palletizer,160.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX03924A,MX03924A,OFT 25FT_50ml_144_Size,CS,144.0,144.0,144.0,108429891.0,108429891.0,3.130000114,CS,2025-02-04 15:21:14.000 -0500,,DOWNTIME,Unknown,Desconocido,,,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,144.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,356.54950773,0.0,0.0,1116,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,58.736842105,14.307692308,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_CasePacker,146.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,000000000000151106,151106,OFT 25FZ_2.5oz_24_Size,CS,24.0,24.0,24.0,108433945.0,108433945.0,18.75,CS,2025-02-07 00:07:52.000 -0500,2025-02-07 13:58:36.000 -0500,DOWNTIME,Extracción de cajas,Extracción de cajas,Size,Size,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,39,0.65,0.0,0.65,0.0,0.0,0.65,0,0,0.65,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003_Bundler,170.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05532A,MX05532A,OFT 38FR_125ml_48_Size,CS,48.0,48.0,48.0,108433621.0,108433621.0,450.0,CS,2025-02-06 18:16:21.000 -0500,2025-02-08 00:18:15.000 -0500,WAITING,Downstream,Acumulación,ALL,ALL,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,885,14.75,0.0,14.75,0.0,0.0,14.75,0,0,0.0,0.0,0.0,14.75,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO006,FIPCO006,224.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Kids,TFS30,000000000061024733,61024733,OFT 38FR_4.6oz_12_Size,CS,12.0,12.0,12.0,108432658.0,108432658.0,12.0,CS,2025-02-05 22:40:21.000 -0500,2025-02-09 00:26:51.000 -0500,BUSINESS EXTERNAL,No Demand,No Demanda,Size,,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Business External,28621,477.016667,477.016667,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,477.016667,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002_Bundler,163.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,FMX03180C,FMX03180C,OFT 32FT_100ml_72_Size,CS,72.0,72.0,72.0,108429892.0,108429892.0,438.0,CS,2025-02-05 00:08:44.000 -0500,2025-02-06 22:02:41.000 -0500,NOT ENTERED,Unknown,Desconocido,Packing,,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,170,2.833334,0.0,2.833334,0.0,0.0,2.833334,0,0,2.833334,0.0,2.833334,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00F,FIPCO00F_Bundler,184.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,MX06103A,MX06103A,OFT 28FT_75ml_72_Size,CS,72.0,72.0,72.0,108433947.0,108433947.0,450.0,CS,2025-02-07 13:21:33.000 -0500,2025-02-08 11:04:16.000 -0500,DOWNTIME,Unknown,Desconocido,,,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,0,0.0,0.0,0.0,15.4,0.0,0.0,6930,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,364.736842105,88.846153846,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I,204.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,17.5,CS,2025-02-07 02:16:44.000 -0500,2025-02-08 03:28:26.000 -0500,DOWNTIME,Filler,LLenadora,ALL,ALL,Shift3,2025-02-06 21:30:00.000 -0500,2025-02-07 05:59:59.000 -0500,510.0,D,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,13,0.216667,0.0,0.216667,0.0,0.0,0.216667,0,0,0.216667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO006,FIPCO006_CasePacker,227.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Kids,TFS30,000000000061024733,61024733,OFT 38FR_4.6oz_12_Size,CS,12.0,12.0,12.0,108432658.0,108432658.0,12.0,CS,2025-02-05 22:40:53.000 -0500,,PLANNED,Lunch/Break,Comida,Size,,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,4218,70.3,0.0,70.3,0.0,70.3,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,70.3,70.3,70.3,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO003,FIPCO003_Bundler,170.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05532A,MX05532A,OFT 38FR_125ml_48_Size,CS,48.0,48.0,48.0,108433621.0,108433621.0,450.0,CS,2025-02-06 18:16:21.000 -0500,2025-02-08 00:18:15.000 -0500,MAINTENANCE,Autonomous Maintenance,Mntto. Autónomo,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,7,0.116667,0.0,0.116667,0.0,0.116667,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.116667,0.116667,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_CasePacker,146.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX07159A,MX07159A,OFT 25FT_2.2oz_24_Size,CS,24.0,24.0,24.0,108429893.0,108429893.0,18.75,CS,2025-02-06 06:08:37.000 -0500,2025-02-07 00:07:28.000 -0500,CHANGE OVER,Product,Producto,Product,Product,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,8040,134.0,0.0,134.0,0.0,134.0,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,1,134.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061038725,61038725,OFT 38FR_3.0oz_12_2P_Size,CS,24.0,24.0,24.0,108433948.0,108433948.0,210.0,CS,2025-02-07 02:17:18.000 -0500,2025-02-08 03:28:39.000 -0500,CHANGE OVER,ALL,Todo,ALL,ALL,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,12.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,13241,220.683333,0.0,220.683333,0.0,220.683333,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_Bundler,144.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,000000000000151105,151105,OFT 25FZ_2.5oz_24_Size,CS,24.0,24.0,24.0,108433946.0,108433946.0,450.0,CS,2025-02-07 14:04:34.000 -0500,2025-02-09 20:23:49.000 -0500,DOWNTIME,Transporte de láminas,Transporte de láminas,Product,Product,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,131,2.183333,0.0,2.183333,0.0,0.0,2.183333,0,0,2.183333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00F,FIPCO00F,183.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Packs,TFS80-6,FMX03179D,FMX03179D,OFT 28FT_75ml_72_Size,CS,72.0,72.0,72.0,108430290.0,108430290.0,6.25,CS,2025-02-05 04:11:32.000 -0500,2025-02-07 13:20:13.000 -0500,DOWNTIME,Cartoner,Cartonadora,ALL,ALL,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,1114,18.566667,0.0,18.566667,0.0,0.0,18.566667,0,0,18.566667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009,148.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,000000000061045447,61045447,OFT 38FR_170ml_24 Size,CS,24.0,24.0,24.0,108432764.0,108432764.0,16.75,CS,2025-02-06 14:17:29.000 -0500,2025-02-08 01:08:22.000 -0500,CHANGE OVER,ALL,Todo,ALL,ALL,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Plant Decision,3898,64.966667,0.0,64.966667,0.0,64.966667,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_CasePacker,207.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061019476,61019476,OFT 38FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108429895.0,108429895.0,16.75,CS,2025-02-05 04:56:58.000 -0500,2025-02-07 02:16:42.000 -0500,DOWNTIME,Transporte posterior,Transporte posterior,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,98,1.633333,0.0,1.633333,0.0,0.0,1.633333,0,0,1.633333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00I,FIPCO00I_Cartoner,206.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061032091,61032091,OFT 38FR_4.2oz_24_Size,CS,24.0,24.0,24.0,108436118.0,108436118.0,450.0,CS,2025-02-08 03:28:58.000 -0500,2025-02-10 00:30:39.000 -0500,WAITING,Upstream,Falta Producto,ALL,ALL,Shift3,2025-02-07 21:30:00.000 -0500,2025-02-08 05:59:59.000 -0500,510.0,A,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,783,13.05,0.0,13.05,0.0,0.0,13.05,0,0,0.0,0.0,0.0,13.05,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Filler,152.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061044255,61044255,OFT 38FR_120ml_24_Size,CS,24.0,24.0,24.0,108430288.0,108430288.0,450.0,CS,2025-02-04 16:06:17.000 -0500,2025-02-05 09:01:41.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift1,2025-02-05 06:00:00.000 -0500,2025-02-05 13:59:59.000 -0500,480.0,B,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,1279,21.316666,0.0,21.316666,0.0,0.0,21.316666,0,0,0.0,21.316666,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E_Bundler,177.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000000178331,178331,OFT 35FT_4.6oz_24_Size,CS,24.0,24.0,24.0,108434583.0,108434583.0,450.0,CS,2025-02-07 13:07:08.000 -0500,2025-02-09 13:21:49.000 -0500,WAITING,Upstream,Falta Producto,ALL,ALL,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,166,2.766666,0.0,2.766666,0.0,0.0,2.766666,0,0,0.0,0.0,0.0,2.766666,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO002,FIPCO002,162.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,Secondary Line,TFS80-6,FMX03180C,FMX03180C,OFT 32FT_100ml_72_Size,CS,72.0,72.0,72.0,108429892.0,108429892.0,6.08,CS,2025-02-05 00:07:43.000 -0500,2025-02-06 22:02:32.000 -0500,DOWNTIME,Bundler,Empaquetadora,Packing,,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,72.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,2017,33.616667,0.0,33.616667,0.0,0.0,33.616667,0,0,33.616667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E,176.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,000000000000178331,178331,OFT 35FT_4.6oz_24_Size,CS,24.0,24.0,24.0,108434583.0,108434583.0,18.75,CS,2025-02-07 13:06:18.000 -0500,2025-02-09 13:21:37.000 -0500,DOWNTIME,Bundler,Empaquetadora,ALL,ALL,Shift2,2025-02-07 14:00:00.000 -0500,2025-02-07 21:29:59.000 -0500,450.0,C,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,3030,50.5,0.0,50.5,0.0,0.0,50.5,0,0,50.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Cartoner,150.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,MX05316A,MX05316A,OFT 38FR_4.0oz_24_Size,CS,24.0,24.0,24.0,108430841.0,108430841.0,450.0,CS,2025-02-05 09:02:46.000 -0500,2025-02-06 14:17:21.000 -0500,DOWNTIME,Ending order,Terminando Orden,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,6,0.1,0.0,0.1,0.0,0.0,0.1,0,0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_Filler,143.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX06994A,MX06994A,OFT_25FT_2.0oz_24_Size,CS,24.0,24.0,24.0,108432488.0,108432488.0,450.0,CS,2025-02-05 18:14:49.000 -0500,2025-02-06 06:08:00.000 -0500,WAITING,Downstream,Acumulación,Product,Product,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,1600,26.666669,0.0,26.666669,0.0,0.0,26.666669,0,0,0.0,0.0,0.0,26.666669,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E,176.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,000000000000151093,151093,OFT 35FT_6.0oz_24_Size,CS,24.0,24.0,24.0,108431438.0,108431438.0,18.75,CS,2025-02-05 16:37:43.000 -0500,2025-02-06 06:51:09.000 -0500,DOWNTIME,Cartoner,Cartonadora,Product,Product,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,1727,28.783335,0.0,28.783335,0.0,0.0,28.783335,0,0,28.783335,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00E,FIPCO00E,176.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Line,,High Complexity,TFS80-6,000000000000151114,151114,OFT 35FT_4.0oz_24_Size,CS,24.0,24.0,24.0,108432723.0,108432723.0,18.75,CS,2025-02-06 06:51:27.000 -0500,2025-02-06 20:14:45.000 -0500,DOWNTIME,Filler,LLenadora,ALL,ALL,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,3719,61.983334,0.0,61.983334,0.0,0.0,61.983334,0,0,61.983334,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00G,FIPCO00G_Palletizer,195.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061028649,61028649,OFT 35FT_115ml_36_2P_Size,CS,72.0,72.0,72.0,108431439.0,108431439.0,5.829999924,CS,2025-02-05 19:17:21.000 -0500,,RUNNING,Running,Corriendo,ALL,ALL,Shift3,2025-02-05 21:30:00.000 -0500,2025-02-06 05:59:59.000 -0500,510.0,D,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,36.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,29829,497.15,0.0,497.15,0.0,0.0,497.15,0,0,0.0,497.15,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO009,FIPCO009_Palletizer,153.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,High Complexity,TFS80-6,000000000061045447,61045447,OFT 38FR_170ml_24 Size,CS,24.0,24.0,24.0,108432764.0,108432764.0,16.75,CS,2025-02-06 14:17:45.000 -0500,2025-02-08 01:08:30.000 -0500,RUNNING,Running,Corriendo,ALL,ALL,Shift2,2025-02-06 14:00:00.000 -0500,2025-02-06 21:29:59.000 -0500,450.0,C,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Runtime,16994,283.233333,0.0,283.233333,0.0,0.0,283.233333,0,0,0.0,283.233333,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO004,FIPCO004_CasePacker,146.0,MX11,,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Low Complexity,TFS80-6,MX06994A,MX06994A,OFT_25FT_2.0oz_24_Size,CS,24.0,24.0,24.0,108432488.0,108432488.0,18.75,CS,2025-02-05 18:14:56.000 -0500,2025-02-06 06:08:02.000 -0500,WAITING,Upstream,Falta Producto,Size,Size,Shift2,2025-02-05 14:00:00.000 -0500,2025-02-05 21:29:59.000 -0500,450.0,C,False,2025-02-05,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Waiting,930,15.5,0.0,15.5,0.0,0.0,15.5,0,0,0.0,0.0,0.0,15.5,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00H,FIPCO00H_Filler,201.0,MX11,Adjustment,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Secondary Line,TFS80-6,MX02080D,MX02080D,OFT 35FR_75ml_48_Size,CS,48.0,48.0,48.0,108432978.0,108432978.0,450.0,CS,2025-02-06 09:33:48.000 -0500,2025-02-07 13:38:44.000 -0500,DOWNTIME,Transporte de cajas,Transporte de cajas,ALL,ALL,Shift1,2025-02-07 06:00:00.000 -0500,2025-02-07 13:59:59.000 -0500,480.0,B,False,2025-02-07,2025-02-01,2025-01-01,2025-01-01,48.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,46,0.766667,0.0,0.766667,0.0,0.0,0.766667,0,0,0.766667,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing
FIPCO00J,FIPCO00J_Cartoner,767.0,MX11,Breakdown,Full OPERA,PACK,OC,TPST,OralCare,Equipment,,Packs,TFS80-6,000000000061012223,61012223,OFT 28FT_60ml_24_3P_Size,CS,72.0,72.0,72.0,108427065.0,108427065.0,150.0,CS,2025-02-05 07:07:27.000 -0500,,DOWNTIME,Error de propulsión general,Error de propulsión general,ALL,ALL,Shift1,2025-02-06 06:00:00.000 -0500,2025-02-06 13:59:59.000 -0500,480.0,B,False,2025-02-06,2025-02-01,2025-01-01,2025-01-01,24.0,"Mexico, Mission Hills",Y,MX,Mexico,MFG,37980,MX03,Strategic,20.9817163,-100.4223264,LA,Latin America,LA,Latin America,Unplanned,177,2.95,0.0,2.95,0.0,0.0,2.95,0,0,2.95,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19,78,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,OPERA,Supply Chain,Manufacturing

======================================
end data sample (csv) 
======================================



==============================================
begin owlready2 documentation -- for reference
==============================================

================================================
File: doc/README.md
================================================
# General Information

This directory contains the source file for the docs.

# Dependencies

To ensure you have all dependencies for building the documentation, run the followin:
```
pip install sphinx
pip install sphinx-rtd-theme
```

# Build the Docs

From the project root (where `setup.py` lives) run the folloing:

```
sphinx-build -b html doc doc/html
```

For more information see <https://www.sphinx-doc.org/en/master/usage/quickstart.html>.



================================================
File: doc/annotations.rst
================================================
Annotations
===========

In Owlready2, annotations are accessed as attributes.
For Classes, notice that annotations are **not** inherited.


Adding an annotation
--------------------

For a given entity (a Class, a Property or an Individual), the following syntax can be used to add
annotations:

::
   
   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         pass
   
   >>> Drug.comment = ["A first comment on the Drug class", "A second comment"]
   
   >>> Drug.comment.append("A third comment")

The following annotations are available by default: comment, isDefinedBy, label, seeAlso,
backwardCompatibleWith, deprecated, incompatibleWith, priorVersion, versionInfo.

Owlready2 also supports annotations on relation triples, using the AnnotatedRelation class as folows:

::

   >>> with onto:
   ...     class HealthProblem(Thing):
   ...         pass

   ...     class is_prescribed_for(Drug >> HealthProblem):
   ...         pass

   >>> acetaminophen = Drug("acetaminophen")
   >>> pain = HealthProblem("pain")
   >>> acetaminophen.is_prescribed_for.append(pain)
   
   >>> AnnotatedRelation(acetaminophen, is_prescribed_for, pain).comment = ["A comment on the acetaminophen-pain relation"]

The AnnotatedRelation class constructor takes three parameters, corresponding to a subject-predicate-object triple.
Then, you can use the dotted notation on the AnnotatedRelation object to access the various annotations
(e.g., .comment, .label, etc).

.. note::

   The following, old, syntax remains supported:

   ::

      >>> comment[acetaminophen, is_prescribed_for, pain] = ["A comment on the acetaminophen-pain relation"]
   

Special pseudo-properties are provided for annotating is-a relations (rdfs_subclassof and rdf_type),
domains (rdf_domain) and ranges (rdf_range).

::

   >>> AnnotatedRelation(Drug, rdfs_subclassof, Thing).comment = ["A comment on an is-a relation"]


Annotation values are usually lists of values. However, in many cases, a single value is used.
Owlready2 accepts to set an annotation property to a single value, for example:

::
   
   >>> acetaminophen.comment = "This comment replaces all existing comments on acetaminophen"


Querying annotations
--------------------

Annotation values can be obtained using the dot notation, as if they were attributes of the entity:

::
   
   >>> print(Drug.comment)
   ['A first comment on the Drug class', 'A second comment', 'A third comment']
   
   >>> print(AnnotatedRelation(acetaminophen, is_prescribed_for, pain).comment)
   ['A comment on the acetaminophen-pain relation']
   
   >>> print(AnnotatedRelation(Drug, rdfs_subclassof, Thing).comment)
   ['A comment on an is-a relation']

If you expect a single value, the .first() method of the list can be used. It returns the first value of
the list, or None if the list is empty.

::

   >>> acetaminophen.comment.first()
   'This comment replaces all existing comments on acetaminophen'


.. note::

   The following, old, syntax remains supported:

   ::

      >>> comment[acetaminophen, is_prescribed_for, pain]


Deleting annotations
--------------------

To delete an annotation, simply remove it from the list.

::
   
   >>> Drug.comment.remove("A second comment")


For removing **all** annotations of a given type:

::
   
   >>> Drug.comment = []


Nested annotated relations
--------------------------

AnnotatedRelation can be nested if desired, as follows:

::
   
   >>> annotr = AnnotatedRelation(acetaminophen, is_prescribed_for, pain)
   >>> nested = AnnotatedRelation(annotr, comment, "A comment on the acetaminophen-pain relation")
   >>> nested.comment = ["A comment on the previous comment"]

   
Custom rendering of entities
----------------------------

The set_render_func() global function can be used to specify how Owlready2 renders entities, i.e. how they are
converted to text when printing them. set_render_func() accepts a single param, a function which takes
one entity and return a string.

The 'label' annotation is commonly used for rendering entities.
The following example renders entities using their 'label' annotation, defaulting to their name:

::
   
   >>> def render_using_label(entity):
   ...     return entity.label.first() or entity.name
   
   >>> set_render_func(render_using_label)
   
   >>> Drug    # No label defined yet => use entity.name
   Drug
   
   >>> Drug.label = "The drug class"
   
   >>> Drug
   The drug class


The following example renders entities using their IRI:

::
   
   >>> def render_using_iri(entity):
   ...     return entity.iri
   
   >>> set_render_func(render_using_iri)

   >>> Drug
   http://test.org/onto.owl#Drug


Language-specific annotations
-----------------------------

To specify the language of textual annotations, the 'locstr' (localized string) type can be used:

::
   
   >>> Drug.comment = [ locstr("Un commentaire en Français", lang = "fr"),
   ...                  locstr("A comment in English", lang = "en") ]
   >>> Drug.comment[0]
   'Un commentaire en Français'
   >>> Drug.comment[0].lang
   'fr'
   
In addition, the list of values support language-specific sublists, available as '.<language code>'
(e.g. .fr, .en, .es, .de,...).
These sublists contain normal string (not locstr), and they can be modified.

::

   >>> Drug.comment.fr
   ['Un commentaire en Français']
   
   >>> Drug.comment.en
   ['A comment in English']
   
   >>> Drug.comment.en.first()
   'A comment in English'
   
   >>> Drug.comment.en.append("A second English comment")

The get_lang() method does the same (but is easier to call if the lang is in a variable):

::

   >>> lang = "fr"
   >>> Drug.comment.get_lang(lang)
   ['Un commentaire en Français']

The get_lang_first() method return only the first language-specific string found (it is equivalent to get_lang().first()):

::

   >>> lang = "fr"
   >>> Drug.comment.get_lang_first(lang)
   'Un commentaire en Français'

.. warning::
   
   Modifying the language-specific sublist will automatically update the list of values (and the quad store).
   However, the contrary is not true: modifying the list of values does **not** update language-specific sublists.
   

Plain literal
-------------

The plainliteral Python datatype can be used to create RDF plain literal (or to test whether a value is a plain literal):

::
   >>> Drug.comment.append(plainliteral("A plain literal comment."))



Creating new classes of annotation
----------------------------------

The AnnotationProperty class can be subclasses to create a new class of annotation:

::

   >>> with onto:
   ...     class my_annotation(AnnotationProperty):
   ...         pass

You can also create a subclass of an existing annotation class:

::
   
   >>> with onto:
   ...     class pharmaceutical_comment(comment):
   ...         pass
   
   >>> acetaminophen.pharmaceutical_comment = "A comment related to pharmacology of acetaminophen"


Full-text search (FTS)
----------------------

Full-text search (FTS) can optimize search in textual properties and annotations.
FTS uses Sqlite3 FTS5 implementation.

First, FTS needs to be enabled on the desired properties, by adding them to default_world.full_text_search_properties,
for example for label:

::

   >>> default_world.full_text_search_properties.append(label)

Then, FTS can be used in search as follows:

::

   >>> default_world.search(label = FTS("keyword1 keyword2*"))

Stars can be used as joker, but only at the END of the keyword.

When using full-text search, the _bm25 argument can be used to obtain the BM25 relevance score for each entity found:

::

   >>> default_world.search(label = FTS("keyword1 keyword2*"), _bm25 = True)



================================================
File: doc/class.rst
================================================
Classes and Individuals (Instances)
===================================

Creating a Class
----------------

A new Class can be created in an ontology by inheriting the owlready2.Thing class.

The ontology class attribute can be used to associate your class to the given ontology. If not specified,
this attribute is inherited from the parent class (in the example below, the parent class is Thing,
which is defined in the 'owl' ontology).

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> class Drug(Thing):
   ...     namespace = onto

The namespace Class attribute is used to build the full IRI of the Class,
and can be an ontology or a namespace (see :doc:`namespace`).
The 'with' statement can also be used to provide the ontology (or namespace):

::

   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         pass


The .iri attribute of the Class can be used to obtain the full IRI of the class.

::

   >>> print(Drug.iri)
   http://test.org/onto.owl#Drug

.name and .iri attributes are writable and can be modified (this allows to change the IRI of an entity,
which is sometimes called "refactoring").

   
Creating and managing subclasses
--------------------------------

Subclasses can be created by inheriting an ontology class. Multiple inheritance is supported.

::

   >>> class DrugAssociation(Drug): # A drug associating several active principles
   ...     pass

Owlready2 provides the .is_a attribute for getting the list of superclasses (__bases__ can be used, but
with some limits described in :doc:`restriction`). It can also be modified for adding or removing superclasses.

::

   >>> print(DrugAssociation.is_a)
   [onto.Drug]

The .subclasses() method returns the list of direct subclasses of a class.

::

   >>> print(Drug.subclasses())
   [onto.DrugAssociation]

The .descendants() and .ancestors() Class methods return a set of the descendant and ancestor Classes
(including self, but excluding non-entity classes such as restrictions).

::

   >>> DrugAssociation.ancestors()
   {onto.DrugAssociation, owl.Thing, onto.Drug}


Creating classes dynamically
----------------------------

The 'types' Python module can be used to create classes and subclasses dynamically:

::

   >>> import types

   >>> with my_ontology:
   ...     NewClass = types.new_class("NewClassName", (SuperClass,))

   
Creating equivalent classes
---------------------------

The .equivalent_to Class attribute is a list of equivalent classes. It behaves like .is_a (programmatically).

To obtain all equivalent classes, including indirect ones (due to transitivity), use .INDIRECT_equivalent_to.


Creating Individuals
--------------------

Individuals are instances in ontologies. They are created as any other Python instances.
The first parameter is the name (or identifier) of the Individual;
it corresponds to the .name attribute in Owlready2.
If not given, the name if automatically generated from the Class name and a number.

::
   
   >>> my_drug = Drug("my_drug")
   >>> print(my_drug.name)
   my_drug
   >>> print(my_drug.iri)
   http://test.org/onto.owl#my_drug

   >>> unamed_drug = Drug()
   >>> print(unamed_drug.name)
   drug_1

Additional keyword parameters can be given when creating an Individual, and they will be associated to the
corresponding Properties (for more information on Properties, see :doc:`properties`).

::

   my_drug = Drug("my_drug2", namespace = onto, has_for_active_principle = [],...)


The Instances are immediately available in the ontology:

::

   >>> print(onto.drug_1)
   onto.drug_1
   
The .instances() class method can be used to iterate through all Instances of a Class (including its
subclasses). It returns a generator.

::

   >>> for i in Drug.instances(): print(i)

Multiple calls with the individual name and namespace will returns the same individual
(without creating a dupplicate), and update the individual if property values are given.
   
::

   >>> assert Drug("my_drug3") is Drug("my_drug3") 

Finally, Individuals also have the .equivalent_to attribute (which correspond to the "same as" relation).


Querying Individual relations
-----------------------------

For a given Individual, the values of a property can be obtained with the usual
"object.property" dot notation. See :doc:`properties` for more details.

::

   >>> print(onto.my_drug.has_for_active_principle)

Property name can be prefixed with "INDIRECT_" to obtain all indirect relations
(i.e. those asserted at the class level with restriction, implied by transistive properties, subproperties, equivalences, etc):

::

   >>> print(onto.my_drug.INDIRECT_has_for_active_principle)

   
Introspecting Individuals
-------------------------

The list of properties that exist for a given individual can be obtained by the .get_properties() method.
It returns a generator that yields the properties (without dupplicates).

::
   
   >>> onto.drug_1.get_properties()

The following example shows how to list the properties of a given individual, and the associated values:

::
   
   >>> for prop in onto.drug_1.get_properties():
   >>>     for value in prop[onto.drug_1]:
   >>>         print(".%s == %s" % (prop.python_name, value))

Notice the "Property[individual]" syntax. It allows to get the values as a list, even for functional properties
(contrary to getattr(individual, Property.python_name).

   
Inverse properties can be obtained by the .get_inverse_properties() method.
It returns a generator that yields (subject, property) tuples.

::
   
   >>> onto.drug_1.get_inverse_properties()


Mutli-Class Individuals
-----------------------

In ontologies, an Individual can belong to more than one Class. This is supported in Owlready2.

Individuals have a .is_a atribute that behaves similarly to Class .is_a,
but with the Classes of the Individual. In order to create a mutli-Class Individual,
you need to create the Individual as a single-Class Instance first,
and then to add the other Class(ses) in its .is_a attribute:

::
   
   >>> class BloodBasedProduct(Thing):
   ...     ontology = onto
   
   >>> a_blood_based_drug = Drug()
   >>> a_blood_based_drug.is_a.append(BloodBasedProduct)

Owlready2 will automatically create a hidden Class that inherits from both Drug and BloodBasedProduct. This
hidden class is visible in a_blood_based_drug.__class__, but not in a_blood_based_drug.is_a.
   

Equivalent (identical, SameAs) individuals
------------------------------------------

The .equivalent_to Individual attribute is a list of equivalent individuals (corresponding to OWL SameAs relation).
This list can be modified.

To obtain all equivalent individuals, including indirect ones (due to transitivity), use .INDIRECT_equivalent_to.


Destroying entities
-------------------

The destroy_entity() global function can be used to destroy an entity, i.e. to remove it from the ontology and
the quad store.
Owlready2 behaves similarly to Protege4 when destroying entities: all relations involving the destroyed entity
are destroyed too, as well as all class constructs and blank nodes that refer it.

::

   >>> destroy_entity(individual)
   >>> destroy_entity(Klass)
   >>> destroy_entity(Property)



================================================
File: doc/conf.py
================================================
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Owlready documentation build configuration file, created by
# sphinx-quickstart on Sun May  4 15:22:45 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import sphinx_rtd_theme


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    "sphinx_rtd_theme",
]


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Owlready2'
copyright = '2014-2023, Jean-Baptiste LAMY'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The full version, including alpha/beta/rc tags.
import os.path, re
s = open(os.path.join(os.path.dirname(__file__), "..", "__init__.py")).read()
release = re.findall('VERSION\\s*=\\s*"(.*?)"', s)[0]
# The short X.Y version.
version = ".".join(release.split(".")[:2])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#html_theme = 'alabaster'
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
html_use_index = False

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Owlready2doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'Owlready2.tex', 'Owlready2 Documentation',
   'Jean-Baptiste LAMY', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'owlready2', 'Owlready2 Documentation',
     ['Jean-Baptiste LAMY'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Owlready2', 'Owlready2 Documentation',
   'Jean-Baptiste LAMY', 'Owlready2', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

#intersphinx_mapping = {'http://docs.python.org/': None}
intersphinx_mapping = {}



================================================
File: doc/contact.rst
================================================

Contact and links
=================

A forum/mailing list is available for Owlready on Nabble: http://owlready.306.s1.nabble.com

In case of trouble, please write to the forum or contact Jean-Baptiste Lamy <jean-baptiste.lamy *@* univ-paris13 *.* fr>

::

  LIMICS
  University Paris 13, Sorbonne Paris Cité
  Bureau 149
  74 rue Marcel Cachin
  93017 BOBIGNY
  FRANCE

Owlready on BitBucket (Git development repository): https://bitbucket.org/jibalamy/owlready2



================================================
File: doc/datatype.rst
================================================
Datatypes
=========

Owlready automatically recognizes and translates basic datatypes to Python, such as string, int, float, etc.

Binary data, i.e. Python's bytes, are mapped to XML base64Binary, and thus they are base64-encoded in RDF / XML files.


Creating enumerated datatypes
-----------------------------

Enumerated datatype can be created as follows with Owlready:

::
   
   >>> with onto:
   ...   class MyEnum(Datatype):
   ...     equivalent_to = [ OneOf(["Male", "Female", "Other"]) ]

The enumerated datatype can be used in data property ranges:

::
   
   >>> with onto:
   ...   class my_prop(DataProperty):
   ...     range = [ MyEnum ]


The list of enumerated values can be queried as follows:
   
::
   
   >>> onto.MyEnum.equivalent_to[0].instances
   ["Male", "Female", "Other"]

   
Creating custom datatypes
-------------------------

The declare_datatype() global function allows to declare a new datatype. It takes 4 arguments:

 * datatype: the Python datatype (for example, a Python type or class)
 * iri: the IRI used to represent the datatype in ontologies
 * parser: a function that takes a serialized string and returns the corresponding datatype
 * unparser: a function that takes a datatype and returns its serialization in a string

The function returns the storid associated to the datatype.

**Warning:** The datatype must be declared **BEFORE** loading any ontology that uses it.

Here is an example for adding support for the XSD "hexBinary" datatype:

::
   
   >>> class Hex(object):
   ...   def __init__(self, value):
   ...     self.value = value
   
   >>> def parser(s):
   ...   return Hex(int(s, 16))
   
   >>> def unparser(x):
   ...   h = hex(x.value)[2:]
   ...   if len(h) % 2 != 0: return "0%s" % h
   ...   return h
   
   >>> declare_datatype(Hex, "http://www.w3.org/2001/XMLSchema#hexBinary", parser, unparser)


The new datatype can then be used as any others:

::
   
   >>> onto = world.get_ontology("http://www.test.org/t.owl")
   
   >>> with onto:
   ...   class p(Thing >> Hex): pass
   
   ...   class C(Thing): pass
   
   ...   c1 = C()
   ...   c1.p.append(Hex(14))




In addition, the define_datatype_in_ontology() function allows to define the datatype in a given ontology.
This was not needed for hexBinary above, because it is already defined in XMLSchema.
However, for user-defined datatype, it is recommended to define them in an ontology
(Owlready does not strictly require that, but other tools like Protégé do).

The following example (re)define the hexBinary datatype in our ontology:

::
   
   >>> define_datatype_in_ontology(Hex, "http://www.w3.org/2001/XMLSchema#hexBinary", onto)
   
This add the (xsd:hexBinary, rdf:type, rdfs:datatype) RDF triple in the quadstore.

As said above, declare_datatype() must be called * before * using the datatype.
On the contrary, define_datatype_in_ontology() may be called after loading an ontology that use the datatype.




================================================
File: doc/development.rst
================================================
Development
===========

Development installation
------------------------

Due due legacy compatibility, the development installation needs to be done

* either manually, by following these steps:

  1. Create a directory (e.g. ``src/``).
     
  2. Add this directory to the $PYTHONPATH shell variable (= traditional way).
     
  3. Put Owlready sources in that directory (in a subdirectory named ``src/owlready2/``).

* or with pip by following these steps:

  1. Create a virtual environment for development and activate it. 

  2. Create an directory with an arbitrary name, e.g. ``mkdir owlready_dev``.

  3. Move or cloning the Owlready2 repository into this directory and change into it.

  4. Run ``pip install -e .[test]`` inside of this Owlready directory.

  5. In case *Python.h* is missing, install python3-dev (e.g. ``sudo apt-get install python3-dev``).

  6. Run the *setup_develop_mode.py* script :
     ``python setup_develop_mode.py`` 
     inside of this Owlready directory (there are explainations in the script, why this is necessary).
     

Finally, To test everything, cd into the **'test'** directory and run ``python regtest.py``.



================================================
File: doc/disjoint.rst
================================================
Disjointness, open and local closed world reasoning
===================================================

By default, OWL considers the world as 'open', *i.e.* everything that is not stated in the ontology is
not 'false' but 'possible' (this is known as *open world assumption*).
Therfore, things and facts that are 'false' or 'impossible' must be clearly stated as so in the ontology.

Disjoint Classes
----------------

Two (or more) Classes are disjoint if there is no Individual belonging to all these Classes (remember that,
contrary to Python instances, an Individual can have several Classes, see :doc:`class`).

A Classes disjointness is created with the AllDisjoint() function, which takes a list of Classes
as parameter. In the example below, we have two Classes, Drug and ActivePrinciple, and we assert that they
are disjoint (yes, we need to specify that explicitely -- sometimes ontologies seem a little dumb!).

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         pass
   ...     class ActivePrinciple(Thing):
   ...         pass
   ...     AllDisjoint([Drug, ActivePrinciple])


Disjoint Properties
-------------------

OWL also introduces Disjoint Properties.
Disjoint Properties can also be created using AllDisjoint().


Different Individuals
---------------------

Two Individuals are different if they are distinct. In OWL, two Individuals might be considered as being actually
the same, single, Individual, unless they are stated different.
Difference is to Individuals what disjointness is to Classes.

The following example creates two active principles and asserts that they are different (yes, we also need
to state explicitely that acetaminophen and aspirin are not the same!)

::

   >>> acetaminophen = ActivePrinciple("acetaminophen")
   >>> aspirin       = ActivePrinciple("aspirin")
   
   >>> AllDifferent([acetaminophen, aspirin])

.. note::

   In Owlready2, AllDifferent is actually the same function as AllDisjoint -- the exact meaning depends on the
   parameters (AllDisjoint if you provide Classes, AllDifferent if you provide Instances,
   and disjoint Properties if you provide Properties).
   
   
Querying and modifying disjoints
--------------------------------

The .disjoints() method returns a generator for iterating over AllDisjoint constructs involving the given Class
or Property. For Individuals, .differents() behaves similarly.

::

   >>> for d in Drug.disjoints():
   ...     print(d.entities)
   [onto.Drug, onto.ActivePrinciple]

The 'entities' attribute of an AllDisjoint is writable, so you can modify the AllDisjoint construct by adding
or removing entities.

OWL also provides the 'disjointWith' and 'propertyDisjointWith' relations for pairwise disjoints (involving
only two elements). Owlready2 exposes **all** disjoints as AllDisjoints, *including* those declared with 
the 'disjointWith' or 'propertyDisjointWith' relations. In the quad store (or when saving OWL files),
disjoints involving 2 entities are defined using the 'disjointWith' or 'propertyDisjointWith' relations,
while others are defined using AllDisjoint or AllDifferent.


Closing Individuals
-------------------

The open world assumption also implies that the properties of a given Individual are not limited to the
ones that are explicitely stated. For example, if you create a Drug Individual with a single Active
Principle, it does not mean that it has *only* a single Active Principle.

::

   >>> with onto:
   ...     class has_for_active_principle(Drug >> ActivePrinciple): pass
   
   >>> my_acetaminophen_drug = Drug(has_for_active_principle = [acetaminophen])

In the example above, 'my_acetaminophen_drug' has an acetaminophen Active Principle (this fact is true) and it
may have other Active Principle(s) (this fact is possible).

If you want 'my_acetaminophen_drug' to be a Drug with acetaminophen and no other Active Principle, you have to
state it explicitely using a restriction (see :doc:`restriction`):

::

   >>> my_acetaminophen_drug.is_a.append(has_for_active_principle.only(OneOf([acetaminophen])))

Notice that we used OneOf() to 'turn' the acetaminophen Individual into a Class that we can use in the restriction.

You'll quickly find that the open world assumption often leads to tedious and long lists
of AllDifference and Restrictions. Hopefully, Owlready2 provides the close_world() function for automatically
'closing' an Individual. close_world() will automatically add ONLY restrictions as needed; it accepts an
optional parameter: a list of the Properties to 'close' (defaults to all Properties whose domain is
compatible with the Individual).

::

   >>> close_world(my_acetaminophen_drug)


Closing Classes
---------------

close_world() also accepts a Class. In this case, it closes the Class, its subclasses, and all their Individuals.

By default, when close_world() is not called, the ontology performs **open world reasoning**.
By selecting the Classes and the Individuals you want to 'close',
the close_world() function enables **local closed world reasoning** with OWL.

Closing an ontology
-------------------

Finally, close_world() also accepts an ontology. In this case, it closes all the Classes defined in the ontology.
This corresponds to fully **closed world reasoning**.




================================================
File: doc/general_class_axioms.rst
================================================
General class axioms
====================

General class axioms are axioms of the form "A is a B" where "A" is not a named class, but a class construct
(e.g. an intersection, a union or a restriction).


Creating a general class axiom
------------------------------

One can create a general class axiom as follows:

::

   >>> with onto:
   ...     gca = GeneralClassAxiom(onto.Disorder & onto.has_location.some(onto.Heart)) # Left side
   ...     gca.is_a.append(onto.CardiacDisorder) # Right side


The GeneralClassAxiom class take as parameter the left side class construct.

The right side is available as the .is_a attribute.
Notice that one may add several right sides, by calling is_a.append multiple times.

The left side is available as the .left_side attribute.


Accessing general class axioms
------------------------------

One can list general class axioms with Ontology.general_class_axioms:


::

   >>> gcas = list(onto.general_class_axioms())

One can then test the left side by comparison, for example:



::

   >>> searched_left_side = onto.Disorder & onto.has_location.some(onto.Heart)
   >>> for gca in gcas:
   ...     if gca.left_side == searched_left_side: print("Found!")




================================================
File: doc/index.rst
================================================
Welcome to Owlready2's documentation!
*************************************

Owlready2 is a package for ontology-oriented programming in Python. It can load OWL 2.0 ontologies
as Python objects, modify them, save them, and perform reasoning via HermiT
(included). Owlready2 allows a transparent access to OWL ontologies (contrary
to usual Java-based API).

Owlready version 2 includes an optimized triplestore / quadstore, based on SQLite3.
This quadstore is optimized both for performance and memory consumption. Contrary to version 1,
Owlready2 can deal with big ontologies. Owlready2 can also access to UMLS and medical terminology
(using the integrated PyMedTermino2 submodule).

Owlready2 has been created at the LIMICS reseach lab,
University Paris 13, Sorbonne Paris Cité, INSERM UMRS 1142, Paris 6 University, by
Jean-Baptiste Lamy. It was initially developed during the VIIIP research project funded by ANSM,
the French Drug Agency;
this is why some examples in this documentation relate to drug ;).

Owlready2 is available under the GNU LGPL licence v3.
If you use Owlready2 in scientific works, **please cite the following article**:

   **Lamy JB**.
   `Owlready: Ontology-oriented programming in Python with automatic classification and high level constructs for biomedical ontologies. <http://www.lesfleursdunormal.fr/_downloads/article_owlready_aim_2017.pdf>`_
   **Artificial Intelligence In Medicine 2017**;80:11-28
   
In case of troubles, questions or comments, please use this Forum/Mailing list: http://owlready.306.s1.nabble.com


Table of content
----------------

.. toctree::
   intro.rst
   install.rst
   onto.rst
   class.rst
   properties.rst
   datatype.rst
   restriction.rst
   disjoint.rst
   mixing_python_owl.rst
   reasoning.rst
   annotations.rst
   namespace.rst
   sparql.rst
   world.rst
   sync.rst
   rule.rst
   general_class_axioms.rst
   pymedtermino2.rst
   observe.rst
   development.rst
   porting1.rst
   contact.rst



================================================
File: doc/install.rst
================================================
Owlready2 Installation
======================

Owlready2 can be installed with 'pip', the Python Package Installer.

Owlready2 include an optimized Cython module. This module speeds up by about 20% the loading of large ontologies,
but its use is entirely optional.
To build this module, you need a C compiler, and to install the 'cython' Python package.

On the contrary, if you don't have a C compiler, to **not build** the optimized module you need to uninstall
Cython if it is already installed (or to use the manual installation described below).

Owlready2 can be installed from terminal, from Python, or manually.


Installation from terminal (Bash under Linux or DOS under Windows)
------------------------------------------------------------------

You can use the following Bash / DOS commands to install Owlready2 in a terminal:

::

   pip install owlready2

.. figure:: _images/terminal_installation.png

   
If you don't have the permissions for writing in system files,
you can install Owlready2 in your user directory with this command:

::

   pip install --user owlready2



Installation in Spyder / IDLE (or any other Python console)
-----------------------------------------------------------

You can use the following Python commands to install Owlready2 from a Python 3.7.x console
(including those found in Spyder3 or IDLE):

::

   >>> import pip.__main__
   >>> pip.__main__._main(["install", "--user", "owlready2"])

.. figure:: _images/spyder_installation.png

   
Manual installation
-------------------

Owlready2 can also be installed manually in 3 steps:

# Uncompress the Owlready2-0.21.tar.gz source release file (or any other version), for example in C:\\ under Windows

# Rename the directory C:\\Owlready2-0.21 as C:\\owlready2

# Add the C:\\ directory in your PYTHONPATH; this can be done in Python as follows:

  ::

     import sys
     sys.path.append("C:\")
     import owlready2


In the following screenshot, I used /home/jiba/src instead of C:\\, under Linux:

.. figure:: _images/manual_installation.png



================================================
File: doc/intro.rst
================================================
Introduction
============

Owlready2 is a package for manipulating OWL 2.0 ontologies in Python. It can load, modify, save ontologies, and
it supports reasoning via HermiT (included). Owlready allows a transparent access to OWL ontologies.

Owlready2 can:

 - Import ontologies in RDF/XML, OWL/XML or NTriples format.

 - Manipulates ontology classes, instances and annotations as if they were Python objects.

 - Add Python methods to ontology classes.

 - Re-classify instances automatically, using the HermiT reasoner.

 - Import medical terminologies from UMLS (see :doc:`pymedtermino2`).

   
If you need to "convert" formulas between Protégé, Owlready2 and/or Description Logics, the following cheat sheet may be of interest:

`The great table of Description Logics and formal ontology notations <http://www.lesfleursdunormal.fr/static/_downloads/great_ontology_table.pdf>`_


Short example: What can I do with Owlready?
-------------------------------------------

Load an ontology from a local repository, or from Internet:

::
   
   >>> from owlready2 import *
   >>> onto_path.append("/path/to/your/local/ontology/repository")
   >>> onto = get_ontology("http://www.lesfleursdunormal.fr/static/_downloads/pizza_onto.owl")
   >>> onto.load()

Create new classes in the ontology, possibly mixing OWL constructs and Python methods:

::
   
   >>> class NonVegetarianPizza(onto.Pizza):
   ...   equivalent_to = [
   ...     onto.Pizza
   ...   & ( onto.has_topping.some(onto.MeatTopping)
   ...     | onto.has_topping.some(onto.FishTopping)
   ...     ) ]
   
   ...   def eat(self): print("Beurk! I'm vegetarian!")
   
Access the classes of the ontology, and create new instances / individuals:

::
   
   >>> onto.Pizza
   pizza_onto.Pizza
   
   >>> test_pizza = onto.Pizza("test_pizza_owl_identifier")
   >>> test_pizza.has_topping = [ onto.CheeseTopping(),
   ...                            onto.TomatoTopping() ]

In Owlready2, almost any lists can be modified *in place*,
for example by appending/removing items from lists.
Owlready2 automatically updates the RDF quadstore.

::

  >>> test_pizza.has_topping.append(onto.MeatTopping())
   
Perform reasoning, and classify instances and classes:

::
  
  >>> test_pizza.__class__
  onto.Pizza
   
  >>> # Execute HermiT and reparent instances and classes
  >>> sync_reasoner()
  
  >>> test_pizza.__class__
  onto.NonVegetarianPizza
  >>> test_pizza.eat()
  Beurk! I'm vegetarian !

Export to OWL file:

::

  >>> onto.save()

Load Gene Ontology (GO), a large ontology (~ 170 Mb, can take a moment!):
  
::
   
   >>> go = get_ontology("http://purl.obolibrary.org/obo/go.owl").load()

Access entities with an IRI that does not start with the ontology's IRI, by creating a Namespace:

::

   >>> obo = get_namespace("http://purl.obolibrary.org/obo/")
   
   >>> print(obo.GO_0000001.label)
   ['mitochondrion inheritance']


Architecture
------------

Owlready2 maintains a RDF quadstore in an optimized database (SQLite3),
either in memory or on the disk (see :doc:`world`). It provides a high-level access to the Classes and the
objects in the ontology (aka. ontology-oriented programming). Classes and Invididuals are loaded
dynamically from the quadstore as needed, cached in memory and destroyed when no longer needed.



================================================
File: doc/mixing_python_owl.rst
================================================
Mixing Python and OWL
=====================

Adding Python methods to an OWL Class
-------------------------------------

Python methods can be defined in ontology Classes as usual in Python. In the example below, the Drug Class
has a Python method for computing the per-tablet cost of a Drug, using two OWL Properties (which have been
renamed in Python, see :ref:`associating-python-alias-name-to-properties`):

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         def get_per_tablet_cost(self):
   ...             return self.cost / self.number_of_tablets
   
   ...     class has_for_cost(Drug >> float, FunctionalProperty):
   ...         python_name = "cost"
   
   ...     class has_for_number_of_tablets(Drug >> int, FunctionalProperty):
   ...         python_name = "number_of_tablets"
   
   >>> my_drug = Drug(cost = 10.0, number_of_tablets = 5)
   >>> print(my_drug.get_per_tablet_cost())
   2.0


Forward declarations
--------------------

Sometimes, you may need to forward-declare a Class or a Property.
If the same Class or Property (same name, same namespace) is redefined, the new definition **extends**
the previous one (and do not replace it!).

For example:

::
   
   >>> class has_for_active_principle(Property): pass
   
   >>> with onto:
   ...     class Drug(Thing): pass
   
   ...     class has_for_active_principle(Drug >> ActivePrinciple): pass
   
   ...     class Drug(Thing): # Extends the previous definition of Drug
   ...         is_a = [has_for_active_principle.some(ActivePrinciple)]
   
(Notice that this definition of drug exclude Placebo).



Associating a Python module to an OWL ontology
----------------------------------------------

It is possible to associate a Python module with an OWL ontology. When Owlready2 loads the ontology,
it will automatically import the Python module.
This is done with the 'python_module' annotation, which should be set on the ontology itself.
The value should be the name of your Python module, *e.g.* 'my_package.my_module'.
This annotation can be set with editor like Protégé, after importing the 'owlready_ontology.owl' ontology
(file 'owlready2/owlready_ontology.owl' in Owlready2 sources, URI http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl):

.. figure:: _images/protege_python_module_annotation.png

The Python module can countain Class and Properties definitions, and methods.
However, it does not need to include all the is-a relations, domain, range,...: any such relation
defined in OWL does not need to be specified again in Python. Therefore, if your Class hierarchy is
defined in OWL, you can create all Classes as child of Thing.

For example, in file 'my_python_module.py':

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl") # Do not load the ontology here!
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         def get_per_tablet_cost(self):
   ...             return self.cost / self.number_of_tablets


And then, in OWL file 'onto.owl', you can define:

 * The 'python_module' annotation (value: 'my_python_module')
 * The 'Drug' Class with superclasses if needed
 * The 'has_for_cost' Property (ommitted in Python -- not needed because it has no method)
 * The 'has_for_number_of_tablets' Property (also ommitted)

In this way, Owlready2 allows you to take the best of Python and OWL!



================================================
File: doc/namespace.rst
================================================
Namespaces
==========

Ontologies can define entities located in other namespaces.
An example is Gene Ontology (GO): the ontology IRI is 'http://purl.obolibrary.org/obo/go.owl',
but the IRI of GO entities are not of the form 'http://purl.obolibrary.org/obo/go.owl#GO_entity' but
'http://purl.obolibrary.org/obo/GO_entity' (note the missing 'go.owl#').


Accessing entities defined in another namespace
-----------------------------------------------

These entities can be accessed in Owlready2 using a namespace. The get_namepace(base_iri) global function
returns a namespace for the given base IRI.

The namespace can then be used with the dot notation, similarly to the ontology.

::
   
   >>> # Loads Gene Ontology (~ 170 Mb), can take a moment!
   >>> go = get_ontology("http://purl.obolibrary.org/obo/go.owl").load()
   
   >>> print(go.GO_0000001) # Not in the right namespace
   None
   
   >>> obo = get_namespace("http://purl.obolibrary.org/obo/")
   
   >>> print(obo.GO_0000001)
   obo.GO_0000001
   
   >>> print(obo.GO_0000001.iri)
   http://purl.obolibrary.org/obo/obo.GO_0000001
   
   >>> print(obo.GO_0000001.label)
   ['mitochondrion inheritance']

   
.get_namepace(base_iri) can also be called on an Ontology, for example:

::
   
   >>> obo = go.get_namespace("http://purl.obolibrary.org/obo/")

Namespaces created on an Ontology can also be used for asserting facts and creating classes, instances,...:

::

   >>> with obo:
   >>>     class MyNewClass(Thing): pass # Create http://purl.obolibrary.org/obo/MyNewClass
   

Creating classes in a specific namespace
----------------------------------------

When creating a Class or a Property,
the namespace attribute is used to build the full IRI of the Class,
and to define in which ontology the Class is defined
(RDF triples are added to this ontology).
The Class IRI is equals to the namespace's base IRI (base_iri) + the Class name.

An ontology can always be used as a namespace, as seen in :doc:`class`.
A namespace object can be used if you want to locate the Class at a different IRI.
For example:

::

   >>> onto      = get_ontology("http://test.org/onto/")
   >>> namespace = onto.get_namespace("http://test.org/onto/pharmaco")
   
   >>> class Drug(Thing):
   ...     namespace = namespace


In the example above, the Drug Class IRI is "http://test.org/pharmaco/Drug", but the Drug Class
belongs to the 'http://test.org/onto' ontology.

Owlready2 proposes 3 methods for indicating the namespace:

 * the 'namespace' Class attribute
 * the 'with namespace' statement
 * if not provided, the namespace is inherited from the first parent Class

The following examples illustrate the 3 methods:
   
::

   >>> class Drug(Thing):
   ...     namespace = namespace

   >>> with namespace:
   ...     class Drug(Thing):
   ...         pass

   >>> class Drug2(Drug):
   ...     # namespace is implicitely Drug.namespace
   ...     pass

   
Modifying a class defined in another ontology
---------------------------------------------

In OWL, an ontology can also *modify* a Class already defined in another ontology.

In Owlready2, this can be done using the 'with namespace' statement.
Every RDF triples added (or deleted) inside a 'with namespace' statement
goes in the ontology corresponding to the namespace of the 'with namespace' statement.

The following example creates the Drug Class in a first ontology,
and then asserts that Drug is a subclass of Substance in a second ontology.

::
   
   >>> onto1 = get_ontology("http://test.org/my_first_ontology.owl")
   >>> onto2 = get_ontology("http://test.org/my_second_ontology.owl")
   
   >>> with onto1:
   ...     class Drug(Thing):
   ...         pass

   >>> with onto2:
   ...     class Substance(Thing):
   ...         pass
   
   ...     Drug.is_a.append(Substance)


   
Renaming entities defined in a namespace
----------------------------------------

Owlready has no direct support for renaming entities defined in a namespace that do not correspond to an ontology.
However, a simple workaround is to create an ontology with the same base IRI as the namespace, change this ontology
base iri (with Ontoloy.base_iri = ...), and then destroy the ontology.




================================================
File: doc/observe.rst
================================================
Observation framework
=====================

Owlready2 provides an observation framework in the owlready2.observe module. It allows adding listeners to any entity
of an ontology, in order to be notified when the entity is modified.


Adding and removing listeners
-----------------------------

Let us create a (very) small ontology:

::
   
   >>> onto = get_ontology("http://test.org/test.owl")
   >>> with onto:
   ...   class Pizza(Thing): pass
   ...   class price(Thing >> float): pass
   ...   pizza = Pizza()

And then import the observe module and add a listener to pizza:

::

   >>> from owlready2.observe import *
   >>> def listener(entity, props):
   ...     print("Listener:", entity, props)
   >>> observe(pizza, listener)

The observe() function is used to add a listener to an entity.
   
Whenever relation are added or removed to the entity, listener is called:

::

   >>> pizza.price = [11.0]
   Listener: 305 [304]

The listener receives two arguments: the entity and a list of properties (NB unless you coalesce event as explained below,
the list includes a single value). For performance purpose, Observe uses "store-IDs" as argument for the entity
and the properties, and not Python objects (hence you see integer values above). Here, 305 is the "store-ID" of the pizza
entity and 304 the "store-ID" of the price property (NB the number may differ).

You may convert store-IDs to Python objects with World._get_by_storid(storid).
Here is a modified listener that shows entity and property objects instead of store-IDs:

::

   >>> def listener(entity, props):
   ...     entity =   default_world._get_by_storid(entity)
   ...     props  = [ default_world._get_by_storid(prop) for prop in props ]
   ...     print("Listener:", entity, props)
   
   >>> unobserve(pizza) # Remove previous listener
   >>> observe(pizza, listener)
   
   >>> pizza.price = [11.0]
   Listener: onto.pizza [onto.price]

The unobserve() function is used to remove a listener from an entity (if no listener is given, all listeners are removed).



Coalescing events
-----------------

The coalesced_observations environment can be used to coalesce events and listener calls.

For instance, the following code generates 3 calls to the listener:

::

   >>> pizza.price.append(12.0)
   Listener: onto.pizza [onto.price]
   >>> pizza.label = ["Pizz", "Test pizza"]
   Listener: onto.pizza [rdf-schema.label]
   Listener: onto.pizza [rdf-schema.label]

Since two labels are added, there are 2 calls for the set label operation.
These multiple calls can be problematic if the listener has a performance cost (e.g. updating the user interface).

Multiple calls can be coalesced and merged using the coalesced_observations environment, as follows:

::

   >>> with coalesced_observations:
   ...     pizza.price.append(13.0)
   ...     pizza.label = ["Pizz2", "Test pizza2"]
   Listener: onto.pizza [onto.price, rdf-schema.label]

No call to listeners are emitted inside the "with coalesced_observations" block, and a single call is emitted at the end,
possibly with more than one property.

In addition, you can add/remove general listener to coalesced_observations, with the add_listener() and remove_listener()
methods. The general listener is called without argument, whenever a change is done in the quadstore.


Stopping observation
--------------------

Using the observation framework may have a performance cost. After using it, if you no longer need it,
you should stop it by calling stop_observing(), as follows:

::
   
   >>> stop_observing(default_world)




================================================
File: doc/onto.rst
================================================
Managing ontologies
===================

Creating an ontology
--------------------

A new empty ontology can be obtained with the get_ontology() function; it takes a single parameter,
the IRI of the ontology.
The IRI is a sort of URL; IRIs are used as identifier for ontologies.

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")


.. note::
   
   If an ontology has already been created for the same IRI, it will be returned.
   
.. note::
   
   Some ontologies use a # character in IRI to separate the name of the ontology from the name of the
   entities, while some others uses a /. By default, Owlready2 uses a #, if you want to use a /, the IRI
   should ends with /.

   Examples:

   ::

      >>> onto = get_ontology("http://test.org/onto.owl") # => http://test.org/onto.owl#entity

      >>> onto = get_ontology("http://test.org/onto") # => http://test.org/onto#entity
      
      >>> onto = get_ontology("http://test.org/onto/") # => http://test.org/onto/entity
  



Loading an ontology from OWL files
----------------------------------

Use the .load() method of an ontology for loading it.

The easiest way to load the ontology is to load a local copy. In this case, the IRI is the
local filename prefixed with "file://", for example:

::

   >>> onto = get_ontology("file:///home/jiba/onto/pizza_onto.owl").load()

   
If an URL is given, Owlready2 first searches for a local copy of the OWL file and,
if not found, tries to download it from the Internet. For example:

::

   >>> onto_path.append("/path/to/owlready/onto/")
   
   >>> onto = get_ontology("http://www.lesfleursdunormal.fr/static/_downloads/pizza_onto.owl").load()

The onto_path global variable contains a list of directories for searching local copies of ontologies.
It behaves similarly to sys.path (for Python modules / packages).

The get_ontology() function returns an ontology from its IRI, and creates a new empty ontology if needed.

The .load() method loads the ontology from a local copy or from Internet.
It is **safe** to call .load() several times on the same ontology.
It will be loaded only once.

.. note::
   
   Owlready2 currently reads the following file format: RDF/XML, OWL/XML, NTriples.
   The file format is automatically detected.

   NTriples is a very simple format and is natively supported by Owlready2.
   
   RDF/XML is the most common format; it is also natively supported by Owlready2 (since version 0.2).
   
   OWL/XML is supported using a specific parser integrated to Owlready2.
   This parser supports a large subset of OWL, but is not complete.
   It has been tested mostly with OWL files created with the Protégé editor or with Owlready itself.
   Consequently, preferred formats are RDF/XML and NTriples.

   
In complement to the onto_path global variable, the PREDEFINED_ONTOLOGIES global dict can be used to map ontology IRI
to local files or arbitrary URL. You can add your own mapping to PREDEFINED_ONTOLOGIES. For instance, if the ontology
"http://rds.posccaesar.org/ontology/lis14/ont/core" should actually be loaded from the URL "http://rds.posccaesar.org/ontology/lis14/ont/core/1.0",
you can define it as follows:

::

   >>> PREDEFINED_ONTOLOGIES["http://rds.posccaesar.org/ontology/lis14/ont/core"] = "http://rds.posccaesar.org/ontology/lis14/ont/core/1.0"
   


Accessing the content of an ontology
------------------------------------

You can access to the content of an ontology using the 'dot' notation, as usual in Python or more generally
in Object-Oriented Programming. In this way, you can access the Classes, Instances, Properties,
Annotation Properties,... defined in the ontology.
The [] syntax is also accepted.

::

   >>> print(onto.Pizza)
   onto.Pizza
   
   >>> print(onto["Pizza"])
   onto.Pizza

An ontology has the following attributes:

 * .base_iri : base IRI for the ontology
 * .imported_ontologies : the list of imported ontologies (see below)

and the following methods:

 * .classes() : returns a generator for the Classes defined in the ontology (see :doc:`class`)
 * .individuals() : returns a generator for the individuals (or instances) defined in the ontology (see :doc:`class`)
 * .object_properties() : returns a generator for ObjectProperties defined in the ontology (see :doc:`properties`)
 * .data_properties() : returns a generator for DataProperties defined in the ontology (see :doc:`properties`)
 * .annotation_properties() : returns a generator for AnnotationProperties defined in the ontology (see :doc:`annotations`)
 * .properties() : returns a generator for all Properties (object-, data- and annotation-) defined in the ontology
 * .disjoint_classes() : returns a generator for AllDisjoint constructs for Classes defined in the ontology (see :doc:`disjoint`)
 * .disjoint_properties() : returns a generator for AllDisjoint constructs for Properties defined in the ontology (see :doc:`disjoint`)
 * .disjoints() : returns a generator for AllDisjoint constructs (for Classes and Properties) defined in the ontology
 * .different_individuals() : returns a generator for AllDifferent constructs for individuals defined in the ontology (see :doc:`disjoint`)
 * .get_namepace(base_iri) : returns a namespace for the ontology and the given base IRI (see namespaces below, in the next section)
   
.. note::

   Many methods returns a generator. Generators allows iterating over the values without creating a list,
   which can improve performande. However, they are often not very convenient when exploring the ontology:

   ::

      >>> onto.classes()
      <generator object _GraphManager.classes at 0x7f854a677728>
      
   A generator can be trandformed into a list with the list() Python function:

   ::
      
      >>> list(onto.classes())
      [pizza_onto.CheeseTopping, pizza_onto.FishTopping, pizza_onto.MeatTopping,
      pizza_onto.Pizza, pizza_onto.TomatoTopping, pizza_onto.Topping,
      pizza_onto.NonVegetarianPizza]
      
      
The IRIS pseudo-dictionary can be used for accessing an entity from its full IRI:

::

   >>> IRIS["http://www.lesfleursdunormal.fr/static/_downloads/pizza_onto.owl#Pizza"]
   pizza_onto.Pizza


Ontologies can also define entities located in other namespaces, for example
Gene Ontology (GO) has the following IRI: 'http://purl.obolibrary.org/obo/go.owl',
but the IRI of GO entities are of the form 'http://purl.obolibrary.org/obo/GO_entity' (note the missing 'go.owl#').
See :doc:`namespace` to learn how to access such entities.


Simple queries
--------------


Simple queries can be performed with the .search() method of the ontology. It expects one or several keyword
arguments. The supported keywords are:

* **iri**, for searching entities by its full IRI
* **type**, for searching Individuals of a given Class
* **subclass_of**, for searching subclasses of a given Class
* **is_a**, for searching both Individuals and subclasses of a given Class
* **subproperty_of**, for searching subproperty of a given Property
* any object, data or annotation property name

Special arguments are:

* **_use_str_as_loc_str**: whether to treats plain Python strings as strings in any language (default is True)
* **_case_sensitive**: whether to take lower/upper case into consideration (default is True)
* **_bm25**: if True, returns a list of (entity, relevance) pairs instead of just the entities (default is False)

The value associated to each keyword can be a single value or a list of several values.
A star * can be used as a jocker in string values.

.. warning::

   .search() does not perform any kind of reasoning, it just searches in asserted facts.
   In addition, it cannot find Classes through SOME or ONLY restrictions.

For example, for searching for all entities with an IRI ending with 'Topping':

::

   >>> onto.search(iri = "*Topping")
   [pizza_onto.CheeseTopping, pizza_onto.FishTopping, pizza_onto.MeatTopping,
   pizza_onto.TomatoTopping, pizza_onto.Topping]

In addition, the special value "*" can be used as a wildcard for any object.
For example, the following line searches for all individuals that are related
to another one with the 'has_topping' relation (NB there is none in the default pizza_onto.owl file):

::

   >>> onto.search(has_topping = "*")

When a single return value is expected, the .search_one() method can be used. It works similarly:

::

   >>> onto.search_one(label = "my label")
   

Owlready classes and individuals can be used as values within search(), as follows:

::

   >>> onto.search_one(is_a = onto.Pizza)
   
   
Finally, search() can be nested, as in the following example:

::

   >>> onto.search(is_a = onto.Pizza, has_topping = onto.search(is_a = onto.TomatoTopping))

Owlready automatically combines nested searches in a single, optimized, search.

For more complex queries, SQPARQL can be used with RDFlib (see :doc:`world`).


Ontology metadata
-----------------

The metadata of the ontology can be accessed with .metadata, in read and write access:

::

   >>> print(onto.metadata.comment)
   [...]
   >>> onto.metadata.comment.append("my first comment")

Any annotation can be used with .metadata.

In addition, you can list the available annotions by iterating through .metadata, for example:

::

   >>> for annot_prop in onto.metadata:
   ...         print(annot_prop, ":", annot_prop[onto.metadata])


Importing other ontologies
--------------------------

An ontology can import other ontologies, like a Python module can import other modules.

The imported_ontologies attribute of an ontology is a list of the ontology it imports. You can add
or remove items in that list:

::

   >>> onto.imported_ontologies.append(owlready_ontology)


Saving an ontology to an OWL file
---------------------------------

The .save() method of an ontology can be used to save it.
It will be saved in the first directory in onto_path.

::

   >>> onto.save()
   >>> onto.save(file = "filename or fileobj", format = "rdfxml")

.save() accepts two optional parameters: 'file', a file object or a filename for saving the ontology,
and 'format', the file format (default is RDF/XML).

.. note::
   
   Owlready2 currently writes the following file format: "rdf/xml", "ntriples".
   
   NTriples is a very simple format and is natively supported by Owlready2.
   
   RDF/XML is the most common format; it is also natively supported by Owlready2 (since version 0.2).
   
   OWL/XML is not yet supported for writing.


Changing the ontology base IRI
------------------------------

You can change the ontology base IRI as follows:

::

   >>> onto.base_iri = "http://test.org/new_base_iri.owl#"

This will also change the IRI or all entities in the ontology.
If you don't want to change IRI entities, you can use the set_base_iri() method:

::

   >>> onto.set_base_iri("http://test.org/new_base_iri.owl#", rename_entities = False)


Destroying an ontology
----------------------

You can destroy an ontology as follows:

::

   >>> onto.destroy()

By default, Owlready does not update the Python object in memory. This may cause problem in some situations,
e.g. if you continue using a class from another ontology that inherits from a class in the destroyed ontology.

You can destroy the ontology and update the Python objet as follows:

::

   >>> onto.destroy(update_relation = True, update_is_a = True)

The update_is_a optional argument updates is-a relation (subClassOf, subPropertyOf and RDF type), while update_relation
updates other relations.



================================================
File: doc/porting1.rst
================================================
Differences between Owlready version 1 and 2
============================================

This section summarizes the major differences between Owlready version 1 and 2.


Creation of Classes, Properties and Individuals
-----------------------------------------------

The 'ontology' parameters is now called 'namespace' in Owlready2. It accepts a namespace or an ontology.

Owlready 1:

::

   >>> class Drug(Thing):
   ...     ontology = onto

Owlready 2:

::

   >>> class Drug(Thing):
   ...     namespace = onto


Generated Individual names
--------------------------

Owlready 1 permitted to generate dynamically Individual names, depending on their relations.
This is no longer possible in Owlready 2, due to the different architecture.


Functional properties
---------------------

In Owlready 1, functional properties had default values depending on their range. For example,
if the range was float, the default value was 0.0.

In Owlready 2, functional properties always returns None if not relation has been asserted.


Creation of restrictions
------------------------

In Owlready 1, restrictions were created by calling the property:

::
   
   >> Property(SOME, Range_Class)
   >> Property(ONLY, Range_Class)
   >> Property(MIN, cardinality, Range_Class)
   >> Property(MAX, cardinality, Range_Class)
   >> Property(EXACTLY, cardinality, Range_Class)
   >> Property(VALUE, Range_Instance)

In Owlready 2, they are created by calling the .some(), .only(), .min(), .max(), .exactly() and .value()
methods of the Property:

::
   
   >> Property.some(Range_Class)
   >> Property.only(Range_Class)
   >> Property.min(cardinality, Range_Class)
   >> Property.max(cardinality, Range_Class)
   >> Property.exactly(cardinality, Range_Class)
   >> Property.value(Range_Individual)

   
Logical operators and 'One of' constructs
-----------------------------------------

In Owlready 1, the negation was called 'NOT()'.
In Owlready 2, the negation is now called 'Not()'.

In Owlready 1, the logical operators (Or and And) and the one_of construct expect several values as parameters.

::

   >>> Or(ClassA, ClassB,...)
   
In Owlready 2, the logical operators (Or and And) and the OneOf construct expect a list of values.

::

   >>> Or([ClassA, ClassB,...])


Reasoning
---------

In Owlready 1, the reasoner was executed by calling ontology.sync_reasoner().

::

   >>> onto.sync_reasoner()

In Owlready 2, the reasoner is executed by calling sync_reasoner(). The reasoning can involve several ontologies
(all those that have been loaded). sync_reasoner() actually acts on a World (see :doc:`world`).

::

   >>> sync_reasoner()


Annotations
-----------

In Owlready 1, annotations were available through the ANNOTATIONS pseudo-dictionary.

::

   >>> ANNOTATIONS[Drug]["label"] = "Label for Class Drug"

   

In Owlready 2, annotations are available as normal attributes.

::

   >>> Drug.label = "Label for Class Drug"




================================================
File: doc/properties.rst
================================================
Properties
==========


Creating a new class of property
--------------------------------

A new property can be created by sublcassing the ObjectProperty or DataProperty class.
The 'domain' and 'range' properties can be used to specify the domain and the range of the property.
Domain and range must be given in list, since OWL allows to specify several domains or ranges for a given
property (if multiple domains or ranges are specified, the domain or range is the intersection of them,
*i.e.* the items in the list are combined with an AND logical operator).

The following example creates two Classes, Drug and Ingredient, and then an ObjectProperty that relates them.

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")

   >>> with onto:
   ...     class Drug(Thing):
   ...         pass
   ...     class Ingredient(Thing):
   ...         pass
   ...     class has_for_ingredient(ObjectProperty):
   ...         domain    = [Drug]
   ...         range     = [Ingredient]

In addition, the 'domain >> range' syntax can be used when creating property. It replaces the ObjectProperty
or DataProperty parent Class, as follows:

::

   >>> with onto:
   ...     class has_for_ingredient(Drug >> Ingredient):
   ...         pass

   


In addition, the following subclasses of Property are available: FunctionalProperty, InverseFunctionalProperty,
TransitiveProperty, SymmetricProperty, AsymmetricProperty, ReflexiveProperty, IrreflexiveProperty.
They should be used in addition to ObjectProperty or DataProperty (or the 'domain >> range' syntax).


Getting domain and range
------------------------

The .domain and .range attributes of a Property can be used to query its domain and range.
They returns a list.

::

   >>> has_for_ingredient.domain
   [Drug]
   
   >>> has_for_ingredient.range
   [Ingredient]




Creating a relation
-------------------

A relation is a triple (subject, property, object) where property is a Property class, and subject and object
are instances (or literal, such as string or numbers) which are subclasses of the domain and range
defined for the property class.
A relation can be get or set using Python attribute of the subject, the attribute name being the same as
the Property class name: 

::

   >>> my_drug = Drug("my_drug")
   
   >>> acetaminophen = Ingredient("acetaminophen")
   
   >>> my_drug.has_for_ingredient = [acetaminophen]

The attribute contains a list of the subjects:

::

   >>> print(my_drug.has_for_ingredient)
   [onto.acetaminophen]

This list can be modifed *in place* or set to a new value;
Owlready2 will automatically add or delete RDF triples in the quadstore as needed:

::

   >>> codeine = Ingredient("codeine")
   
   >>> my_drug.has_for_ingredient.append(codeine)
   
   >>> print(my_drug.has_for_ingredient)
   [onto.acetaminophen, onto.codeine]
   

Data Property
-------------

Data Properties are Properties with a data type in their range. The following data types
are currently supported by Owlready2:

 * int
 * float
 * bool
 * str (string)
 * owlready2.normstr (normalized string, a single-line string)
 * owlready2.locstr  (localized string, a string with a language associated)
 * datetime.date
 * datetime.time
 * datetime.datetime

Here is an example of a string Data Property:

::

   >>> with onto:
   ...     class has_for_synonym(DataProperty):
   ...         range = [str]

   >>> acetaminophen.has_for_synonym = ["acetaminophen", "paracétamol"]

The 'domain >> range' syntax can also be used:

::

   >>> with onto:
   ...     class has_for_synonym(Thing >> str):
   ...         pass


Inverse Properties
------------------

Two properties are inverse if they express the same meaning, but in a reversed way. 
For example the 'is_ingredient_of' Property is the inverse of the 'has_for_ingredient' Property created above:
saying "a drug A has for ingredient B" is equivalent to "B is ingredient of drug A".

In Owlready2, inverse Properties are defined using the 'inverse_property' attribute.

::

   >>> with onto:
   ...     class is_ingredient_of(ObjectProperty):
   ...         domain           = [Ingredient]
   ...         range            = [Drug]
   ...         inverse_property = has_for_ingredient

Owlready automatically handles Inverse Properties. It will automatically set has_for_ingredient.inverse_property,
and automatically update relations when the inverse relation is modified.

::

   >>> my_drug2 = Drug("my_drug2")
   
   >>> aspirin = Ingredient("aspirin")
   
   >>> my_drug2.has_for_ingredient.append(aspirin)
   
   >>> print(my_drug2.has_for_ingredient)
   [onto.aspirin]
   
   >>> print(aspirin.is_ingredient_of)
   [onto.my_drug2]


   >>> aspirin.is_ingredient_of = []

   >>> print(my_drug2.has_for_ingredient)
   []

.. note::

   This won't work for the drug created previously, because we created the inverse property
   **after** we created the relation between my_drug and acetaminophen.


Functional and Inverse Functional properties
--------------------------------------------

A functional property is a property that has a single value for a given instance. Functional properties
are created by inheriting the FunctionalProperty class.

::

   >>> with onto:
   ...     class has_for_cost(DataProperty, FunctionalProperty): # Each drug has a single cost
   ...         domain    = [Drug]
   ...         range     = [float]
   
   >>> my_drug.has_for_cost = 4.2
   
   >>> print(my_drug.has_for_cost)
   4.2

Contrary to other properties, a functional property returns
a single value instead of a list of values. If no value is defined, they returns None.

::

   >>> print(my_drug2.has_for_cost)
   None

Owlready2 is also able to guess when a Property is functional with respect to a given class.
In the following example, the 'prop' Property is not functional, but Owlready2 guesses that, for Individuals
of Class B, there can be only a single value. Consequently, Owlready2 considers prop as functional
for Class B.

::

   >>> with onto:
   ...     class prop(ObjectProperty): pass
   ...     class A(Thing): pass
   ...     class B(Thing):
   ...         is_a = [ prop.max(1) ]

   >>> A().prop
   []
   >>> B().prop
   None
   
An Inverse Functional Property is a property whose inverse property is functional.
They are created by inheriting the InverseFunctionalProperty class.


Creating a subproperty
----------------------

A subproperty can be created by subclassing a Property class.

::

   >>> with onto:
   ...     class ActivePrinciple(Ingredient):
   ...         pass
   ...     class has_for_active_principle(has_for_ingredient):
   ...         domain    = [Drug]
   ...         range     = [ActivePrinciple]

.. note::
   
   Owlready2 currently does not automatically update parent properties when a child property is defined.
   This might be added in a future version, though.

   
Obtaining indirect relations (considering subproperty, transitivity, etc)
-------------------------------------------------------------------------

Property name can be prefixed by "INDIRECT_" to obtain all indirectly
related entities. It takes into account:

 * transitive, symmetric and reflexive properties,
 * property inheritance (i.e. subproperties),
 * classes of an individual (i.e. values asserted at the class level),
 * class inheritance (i.e. parent classes).
 * equivalences (i.e. equivalent classes, identical "same-as" individuals,...)

::

   >>> with onto:
   ...     class BodyPart(Thing): pass
   ...     class part_of(BodyPart >> BodyPart, TransitiveProperty): pass
   ...     abdomen          = BodyPart("abdomen")
   ...     heart            = BodyPart("heart"           , part_of = [abdomen])
   ...     left_ventricular = BodyPart("left_ventricular", part_of = [heart])
   ...     kidney           = BodyPart("kidney"          , part_of = [abdomen])
    
   ... print(left_ventricular.part_of)
   [heart]
   
   ... print(left_ventricular.INDIRECT_part_of)
   [heart, abdomen]


.. _associating-python-alias-name-to-properties:

Associating Python alias name to Properties
-------------------------------------------

In ontologies, properties are usually given long names, *e.g.* "has_for_ingredient", while in programming
languages like Python, shorter attribute names are more common, *e.g.* "ingredients" (notice also the use
of a plural form, since it is actually a list of several ingredients).

Owlready2 allows to rename Properties with more Pythonic name through the 'python_name' annotation (defined
in the Owlready ontology, file 'owlready2/owlready_ontology.owl' in Owlready2 sources, URI http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl):

::

   >>> has_for_ingredient.python_name = "ingredients"
   
   >>> my_drug3 = Drug()
   
   >>> cetirizin = Ingredient("cetirizin")
   
   >>> my_drug3.ingredients = [cetirizin]
   
.. note::
   
   The Property class is still considered to be called 'has_for_ingredient', for example it is still
   available as 'onto.has_for_ingredient', but not as 'onto.ingredients'.

For more information about the use of annotations, see :doc:`annotations`.

The 'python_name' annotations can also be defined in ontology editors like Protégé, by importing the Owlready
ontology (file 'owlready2/owlready_ontology.owl' in Owlready2 sources, URI http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl).


Getting relation instances
--------------------------

The list of relations that exist for a given property can be obtained by the .get_relations() method.
It returns a generator that yields (subject, object) tuples.

::
   
   >>> onto.has_for_active_principle.get_relations()

.. warning::
   
   The quadstore is not indexed for the .get_relations() method. Thus, it can be slow on huge ontologies.



================================================
File: doc/pymedtermino2.rst
================================================
PyMedTermino2
=============

Introduction
************

PyMedTermino (Medical Terminologies for Python) is a Python module for easy access to the main medical
terminologies in Python. The following terminologies are supported:

 - All terminologies in UMLS, including:
   - SNOMED CT
   - ICD10
   - MedDRA
 - ICD10 in French (CIM10)

The main features of PyMedTermino are:

 - A single API for accessing all terminologies
 - Optimized full-text search
 - Access to terms, synonyms and translations
 - Manage concepts and relations between concepts
 - Mappings between terminologies (e.g. via UMLS or manual mapping)

PyMedTermino has been designed for "batch" access to terminologies; it is *not* a terminology browser
(althought it can be used to write a terminology browser in Python).

The first version of PyMedTermino was an independent Python package.
The second version (PyMedTermino2) is integrated with Owlready2, and store medical terminologies as OWL ontlogies.
This allows relating medical terms from terminologies with user created concepts.

UMLS data is not included, but can be downloaded for free (see Intallation below). Contrary to PyMedTermino1,
PyMedTermino2 do not require a connection to an external UMLS database: it imports UMLS data in its own local
database, automatically.

If you use PyMedTermino in scientific works, **please cite the following article**:

   **Lamy JB**, Venot A, Duclos C.
   `PyMedTermino: an open-source generic API for advanced terminology services. <http://ebooks.iospress.nl/volumearticle/39485>`_
   **Studies in health technology and informatics 2015**;210:924-928


Installation
************

#. Install Python 3.7 and Owlready2 (if not already done).
   **PyMedTermino2 requires Python >= 3.7 for importing UMLS** (However, after importing the data in the quadstore, it can be used with Python 3.6 if you really need to).

#. After registration with NLM, download UMLS data (Warning: some restriction may apply depending on country; see UMLS licence and its SNOMED CT appendix):

   - https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html

     PyMedTermino2 suports both the "Full UMLS Release Files" and the "UMLS Metathesaurus Files", but the latter
     is recommended since it is faster to uncompress.
     E.g. download “umls-2019AA-metathesaurus.zip”. Do not unzip it!

#. Import UMLS data in Python as follows:

>>> from owlready2 import *
>>> from owlready2.pymedtermino2 import *
>>> from owlready2.pymedtermino2.umls import *
>>> default_world.set_backend(filename = "pym.sqlite3")
>>> import_umls("umls-2019AA-metathesaurus.zip", terminologies = ["ICD10", "SNOMEDCT_US", "CUI"])
>>> default_world.save()

were:
 - "pym.sqlite3" is the quadstore file in which the data are stored.
 - ["ICD10", "SNOMEDCT_US", "CUI"] are the terminologies imported (valid codes are UMLS code, plus "CUI" for CUI).
   If the 'terminologies' parameter is missing, all terminologies are imported.

To import also suppressed/deprecated concept, add the following parameter: remove_suppressed = "".

The importation can take several minutes or hours, depending on the number of terminologies imported.

4. Import French ICD10 (optional):

>>> from owlready2.pymedtermino2.icd10_french import *
>>> import_icd10_french()
>>> default_world.save()

   
SNOMED CT
*********

Loading
-------

To load SNOMED CT in Python:

>>> from owlready2 import *
>>> default_world.set_backend(filename = "pym.sqlite3")
>>> PYM = get_ontology("http://PYM/").load()
>>> SNOMEDCT_US = PYM["SNOMEDCT_US"]

Here, 'PYM' is the abbreviation for PyMedTermino. PYM can be indiced with a terminology code, to obtain
the corresponding terminology object (here, SNOMEDCT_US).


Concepts
--------

The SNOMEDCT_US object represents the SNOMED CT terminology. A SNOMED CT concept can be obtained from its
code (in the following example, 302509004, which is the code for the heart concept) by indexing this
object with curly brackets:

>>> concept = SNOMEDCT_US[302509004]
>>> concept
SNOMEDCT_US["302509004"] # Entire heart

The has_concept() method can be used to verify if a code corresponds to a concept or not:

>>> SNOMEDCT_US.has_concept("invalid_code")
False

Each concept has a code, available as the name of the entity, and a preferred term, available as the label RDF annotation:

>>> concept.name
'302509004'
>>> concept.label
['Entire heart']
>>> concept.label.first()
'Entire heart'

SNOMED CT also proposes synonym terms, available via the 'synonyms' annotation :

>>> concept.synonyms
['Entire heart (body structure)']

The 'terminology' attribute contains the terminology of the concept:

>>> concept.terminology
PYM["SNOMEDCT_US"] # US Edition of SNOMED CT


Full-text search
----------------

The search() method allows full-text search in SNOMED CT terms (including synonyms):

>>> SNOMEDCT_US.search("Cardiac structure")
[SNOMEDCT_US["24964005"] # Cardiac conducting system structure
, SNOMEDCT_US["10746000"] # Cardiac septum structure
...]

Full-text search uses the FTS engine of SQLite, it is thus possible to use its functionalities.
For example, for searching for all words beginning by a given prefix:

>>> SNOMEDCT_US.search("osteo*")
[SNOMEDCT_US["66467005"] # Osteochondromatosis
, SNOMEDCT_US["40970001"] # Chronic osteomyelitis
...]

Is-a relations: parent and child concepts
-----------------------------------------

The “parents” and “children” attributes return the list of parent and child concepts (i.e. the concepts
with is-a relations):

>>> concept.parents
[SNOMEDCT_US["116004006"] # Entire hollow viscus
, SNOMEDCT_US["187639008"] # Entire thoracic viscus
, SNOMEDCT_US["80891009"] # Heart structure
]
>>> concept.children
[SNOMEDCT_US["195591003"] # Entire transplanted heart
]

The ancestor_concepts() and descendant_concepts() methods return all the ancestor concepts
(parents, parents of parents, and so on) and the descendant concepts (children, children of children, and so on) :

>>> concept.ancestor_concepts()
[SNOMEDCT_US["302509004"] # Entire heart
, SNOMEDCT_US["116004006"] # Entire hollow viscus
, SNOMEDCT_US["118760003"] # Entire viscus
...]
>>> concept.descendant_concepts()
[SNOMEDCT_US["302509004"] # Entire heart
, SNOMEDCT_US["195591003"] # Entire transplanted heart
]

Both methods remove dupplicates automatically. They also include the starting concept in the results.
If you do not want it, use the 'include_self' parameter:

>>> concept.descendant_concepts(include_self = False)
[SNOMEDCT_US["195591003"] # Entire transplanted heart
]

PyMedTermino2 concepts are OWL and Python classes. As a consequence, you can use the Python issubclass() function
to test whether a concept is a descendant of another:

>>> issubclass(concept, SNOMEDCT_US["272625005"])
True


Part-of relations
-----------------

“part_of” and “has_part” attributes provide access to subparts or superpart of the concept:

>>> concept.part_of
[SNOMEDCT_US["362010009"] # Entire heart AND pericardium
]
>>> concept.has_part
[SNOMEDCT_US["244258000"] # Entire marginal branch of right coronary artery
, SNOMEDCT_US["261405004"] # Entire atrium
, SNOMEDCT_US["244378006"] # Lateral atrioventricular leaflet
...]


Other relations
---------------

The “get_class_properties” method returns the set of relations available for a given concept. Is-a relations
are never included in this list, and are handled with the “parents” and “children” attributes previously
seen, however part-of relations are included.

>>> concept = SNOMEDCT_US["3424008"]
>>> concept
SNOMEDCT_US["3424008"] # Tachycardia
>>> concept.get_class_properties()
{PYM.mapped_to, PYM.case_significance_id, PYM.unifieds, PYM.terminology, rdf-schema.label, PYM.subset_member, PYM.definition_status_id, PYM.synonyms, PYM.has_interpretation, PYM.active, PYM.interprets, PYM.effective_time, PYM.ctv3id, PYM.groups, PYM.has_finding_site, PYM.type_id}

Each relation corresponds to an attribute in the concept. The name of the attribute is the part after the '.',
e.g. for 'PYM.interprets' the name is 'interprets'.
The attribute's value is a list with the corresponding values:

>>> concept.has_finding_site
[SNOMEDCT_US["24964005"] # Cardiac conducting system structure
]
>>> concept.interprets
[SNOMEDCT_US["364075005"] # Heart rate
]


Relation groups
---------------

In SNOMED CT, relations can be grouped together. The “groups” attribute returns the list of groups. It is
then possible to access to the group's relation.

>>> concept = SNOMEDCT_US["186675001"]
>>> concept
SNOMEDCT_US["186675001"] # Viral pharyngoconjunctivitis
>>> concept.groups
[<Group 453170_0> # mapped_to=Viral conjunctivitis, unspecified
, <Group 453170_3> # has_causative_agent=Virus ; has_associated_morphology=Inflammation ; has_finding_site=Pharyngeal structure ; has_pathological_process=Infectious process
, <Group 453170_4> # has_causative_agent=Virus ; has_associated_morphology=Inflammation ; has_finding_site=Conjunctival structure ; has_pathological_process=Infectious process
>>> concept.groups[2].get_class_properties()
{PYM.has_causative_agent, PYM.has_associated_morphology, PYM.has_finding_site, PYM.has_pathological_process}
>>> concept.groups[2].has_finding_site
[SNOMEDCT_US["29445007"] # Conjunctival structure
]
>>> concept.groups[2].has_associated_morphology
[SNOMEDCT_US["23583003"] # Inflammation
]


Iterating over SNOMED CT
------------------------

To obtain the terminology's first level concepts (i.e. the root concepts), use the children attribute of the terminology:

>>> SNOMEDCT_US.children
[SNOMEDCT_US["138875005"] # SNOMED CT Concept
]

The descendant_concepts() method returns all concepts in SNOMED CT.

>>> for concept in SNOMEDCT_US.descendant_concepts(): [...]



ICD10
*****

Loading modules
---------------

To load SNOMED CT in Python:

>>> from owlready2 import *
>>> default_world.set_backend(filename = "pym.sqlite3")
>>> PYM = get_ontology("http://PYM/").load()
>>> ICD10 = PYM["ICD10"]

Or, for the French version (if you imported it during installation):

>>> CIM10 = PYM["CIM10"]

CIM10 can be used as ICD10.


Concepts
--------

The ICD10 object allows to access to ICD10 concepts. This object behaves similarly to the SNOMED CT
terminology previously described (see `SNOMED CT`_).

>>> ICD10["E10"]
ICD10["E10"] # Insulin-dependent diabetes mellitus
>>> ICD10["E10"].parents
[ICD10["E10-E14.9"] # Diabetes mellitus
]
>>> ICD10["E10"].ancestor_concepts()
[ICD10["E10"] # Insulin-dependent diabetes mellitus
, ICD10["E10-E14.9"] # Diabetes mellitus
, ICD10["E00-E90.9"] # Endocrine, nutritional and metabolic diseases
]

ICD10 being monoaxial, the parents list always includes at most one parent.


UMLS
****

Loading modules
---------------

>>> from owlready2 import *
>>> default_world.set_backend(filename = "pym.sqlite3")
>>> PYM = get_ontology("http://PYM/").load()
>>> CUI = PYM["CUI"]

UMLS concepts (CUI)
-------------------

In UMLS, CUI correspond to concepts: a given concept gathers equivalent terms or codes from various
terminologies.

CUI can be accessed with the UMLS_CUI terminology:

>>> concept = CUI["C0085580"]
>>> concept
CUI["C0085580"] # Essential hypertension
>>> concept.name
'C0085580'
>>> concept.label
['Essential hypertension']
>>> concept.synonyms
['Essential (primary) hypertension', 'Idiopathic hypertension', 'Primary hypertension', 'Systemic primary arterial hypertension', 'Essential hypertension (disorder)']

Relations of CUI are handled in the same way than for SNOMED CT (see above), for example:

>>> concept.get_class_properties()
{PYM.originals, PYM.terminology, rdf-schema.label, PYM.synonyms}


Relation with source terminologies
----------------------------------

The originals attribute of a CUI concept contains the corresponding concepts in UMLS sources terminologies:

>>> concept.originals
[SNOMEDCT_US["59621000"] # Essential hypertension
, CIM10["I10"] # Hypertension essentielle (primitive)
, ICD10["I10"] # Essential (primary) hypertension
]

The inverse attribute is unifieds. For concepts in the source terminologies, it contains the corresponding CUI
(some concepts may be associated with several CUI):

>>> ICD10["I10"].unifieds
[CUI["C0085580"] # Essential hypertension
]


Mapping between terminologies
-----------------------------

PyMedTermino uses the '>>' operator for mapping from a terminology to another.
For example, you can map a SNOMED CT concept to UMLS as follows:

>>> SNOMEDCT_US[186675001]
SNOMEDCT_US["186675001"] # Viral pharyngoconjunctivitis
>>> SNOMEDCT_US[186675001] >> CUI
Concepts([
  CUI["C0542430"] # Viral pharyngoconjunctivitis
])

Or you can map a UMLS concept to ICD10:

>>> CUI["C0542430"] >> ICD10
Concepts([
  ICD10["B30.2"] # Viral pharyngoconjunctivitis
])

Finally, you can map directly from a terminology in UMLS to another terminology in UMLS,
for example from SNOMED CT to ICD10:

>>> SNOMEDCT_US[186675001] >> ICD10
Concepts([
  ICD10["B30.9"] # Viral conjunctivitis, unspecified
])

The direct mapping considers 'mapped_to' relations available first, and default to mapping using CUI.



Set of concepts
***************

The Concepts class implements a set of concepts.

>>> concepts = PYM.Concepts([ ICD10["E10"], ICD10["E11"], ICD10["E12"] ])
>>> concepts
Concepts([
  ICD10["E10"] # Insulin-dependent diabetes mellitus
, ICD10["E12"] # Malnutrition-related diabetes mellitus
, ICD10["E11"] # Non-insulin-dependent diabetes mellitus
])

Concepts class inherits from Python's set and supports all its methods (such as add(), remove(), etc).

Concepts can be used to map several concepts simultaneously, using the '>>' operator, for example:

>>> PYM.Concepts([ ICD10["E10"], ICD10["E11"], ICD10["E12"] ]) >> SNOMEDCT_US
Concepts([
  SNOMEDCT_US["44054006"] # Type 2 diabetes mellitus
, SNOMEDCT_US["46635009"] # Type 1 diabetes mellitus
, SNOMEDCT_US["75524006"] # Malnutrition related diabetes mellitus
])

In addition, the Concepts class also provides advanced terminology-oriented methods:

* keep_most_generic() keeps only the most generic concepts in the set (i.e. it removes all concepts that are a descendant of another concept in the set)
* keep_most_specific() keeps only the most specific concepts in the set (i.e. it removes all concepts that are an ancestor of another concept in the set)
* lowest_common_ancestors() computes the lower common ancestors
* find(c) search the set for a concept that is a descendant of c (including c itself)
* extract(c) search the set for all concepts that are descendant of c (including c itself)
* subtract(c) return a new set with all concepts in the set, except those that are descendant of c (including c itself)
* subtract_update(c) remove from the set for all concepts that are descendant of c (including c itself)
* all_subsets() computes all subsets included in the set.
* imply(other) returns True if all concepts in the 'other' set are descendants of (at least) one of the concepts in the set
* is_semantic_subset(other) returns True if all concepts in this set are descendants of (at least) one of the concept in the 'other' set
* is_semantic_superset(other) returns True if all concepts in this set are ancestors of (at least) one of the concept in the 'other' set
* is_semantic_disjoint(other) returns True if all concepts in this set are semantically disjoint from all concepts in the 'other' set
* semantic_intersection(other) returns the intersection of the set with 'other', considering is-a relations between the concepts in the sets
* remove_entire_families(only_family_with_more_than_one_child = True) replaces concepts in the set by their parents, whenever all the children of the parent are present



================================================
File: doc/reasoning.rst
================================================
Reasoning
=========

OWL reasoners can be used to check the *consistency* of an ontology, and to deduce new fact in the ontology,
typically be *reclassing* Individuals to new Classes, and Classes to new superclasses,
depending on their relations.

Several OWL reasoners exist; Owlready2 includes:

* a modified version of the `HermiT reasoner <http://hermit-reasoner.com/>`_,
  developed by the department of Computer Science of the University of Oxford, and released under the LGPL licence.

* a modified version of the `Pellet reasoner <https://github.com/stardog-union/pellet>`_,
  released under the AGPL licence.
  
HermiT and Pellet are written in Java, and thus you need a Java Vitual Machine to perform reasoning in Owlready2.

HermiT is used by default.


Configuration
-------------

Under Linux, Owlready should automatically find Java.

Under windows, you may need to configure the location of the Java interpreter, as follows:

::

   >>> from owlready2 import *
   >>> import owlready2
   >>> owlready2.JAVA_EXE = "C:\\path\\to\\java.exe"


Setting up everything
---------------------

Before performing reasoning, you need to create all Classes, Properties and Instances, and
to ensure that restrictions and disjointnesses / differences have been defined too.

Here is an example creating a 'reasoning-ready' ontology:

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         def take(self): print("I took a drug")
   
   ...     class ActivePrinciple(Thing):
   ...         pass
   
   ...     class has_for_active_principle(Drug >> ActivePrinciple):
   ...         python_name = "active_principles"

   ...     class Placebo(Drug):
   ...         equivalent_to = [Drug & Not(has_for_active_principle.some(ActivePrinciple))]
   ...         def take(self): print("I took a placebo")

   ...     class SingleActivePrincipleDrug(Drug):
   ...         equivalent_to = [Drug & has_for_active_principle.exactly(1, ActivePrinciple)]
   ...         def take(self): print("I took a drug with a single active principle")
   
   ...     class DrugAssociation(Drug):
   ...         equivalent_to = [Drug & has_for_active_principle.min(2, ActivePrinciple)]
   ...         def take(self): print("I took a drug with %s active principles" % len(self.active_principles))
   
   >>> acetaminophen   = ActivePrinciple("acetaminophen")
   >>> amoxicillin     = ActivePrinciple("amoxicillin")
   >>> clavulanic_acid = ActivePrinciple("clavulanic_acid")
   
   >>> AllDifferent([acetaminophen, amoxicillin, clavulanic_acid])

   >>> drug1 = Drug(active_principles = [acetaminophen])
   >>> drug2 = Drug(active_principles = [amoxicillin, clavulanic_acid])
   >>> drug3 = Drug(active_principles = [])
   
   >>> close_world(Drug)


Running the reasoner
--------------------

The reasoner (HermiT) is simply run by calling the sync_reasoner() global function:

::

   >>> sync_reasoner()

By default, sync_reasoner() places all inferred facts in a special ontology, 'http://inferrences/'.
You can control in which ontology the inferred facts are placed using the 'with ontology' statement
(remember, all triples asserted inside a 'with ontology' statement go inside this ontology).
For example, for placing all inferred facts in the 'onto' ontology:

::

   >>> with onto:
   ...     sync_reasoner()


This allows saving the ontology with the inferred facts (using onto.save() as usual).

The reasoner can also be limited to some ontologies:

::

   >>> sync_reasoner([onto1, onto2,...])

If you also want to infer object property values, use the "infer_property_values" parameter:

::

   >>> sync_reasoner(infer_property_values = True)

If you want to ignore unsupported datatypes, use the "ignore_unsupported_datatypes" parameter:

::

   >>> sync_reasoner(ignore_unsupported_datatypes = True)

To use Pellet instead of HermiT, just use the sync_reasoner_pellet() function instead.

In addition, Pellet also supports the inference of data property values, using the "infer_data_property_values" parameter:

::

   >>> sync_reasoner_pellet(infer_property_values = True, infer_data_property_values = True)



Results of the automatic classification
---------------------------------------

Owlready automatically gets the results of the reasoning from HermiT and reclassifies Individuals and Classes,
*i.e* Owlready changes the Classes of Individuals and the superclasses of Classes.

::

   >>> print("drug2 new Classes:", drug2.__class__)
   drug2 new Classes: onto.DrugAssociation
   
   >>> drug1.take()
   I took a drug with a single active principle

   >>> drug2.take()
   I took a drug with 2 active principles

   >>> drug3.take()
   I took a placebo

In this example, drug1, drug2 and drug3 Classes have changed!
The reasoner *deduced* that drug2 is an Association Drug, and that drug3 is a Placebo.

Also notice how the example combines automatic classification of OWL Classes with polymorphism on Python Classes.


Inconsistent classes and ontologies
-----------------------------------

In case of inconsistent ontology, an OwlReadyInconsistentOntologyError is raised.

Inconcistent classes may occur without making the entire ontology inconsistent, as long as these classes have
no individuals. Inconsistent classes are inferred as equivalent to Nothing. They can
be obtained as follows:

::

   >>> list(default_world.inconsistent_classes())

In addition, the consistency of a given class can be tested by checking for Nothing in its equivalent classes,
as follows:

::

   >>> if Nothing in Drug.equivalent_to:
   ...       print("Drug is inconsistent!")

.. note::

   To debug an inconsistent ontology the ``explain`` command of the Pellet reasoner can provide some useful information.
   The output of this command is shown if for ``sync_reasoner_pellet(...)`` the keyword argument ``debug`` has a value >=2 (default is 1).
   However, note that the additional call to ``pellet explain`` might take more time than the reasoning itself.


Querying inferred classification
--------------------------------

The .get_parents_of(), .get_instances_of() and .get_children_of() methods of an ontology can be used to query the
hierarchical relations, limited to those defined in the given ontology. This is commonly used after reasoning,
to obtain the inferred hierarchical relations.

 * .get_parents_of(entity) accepts any entity (Class, property or individual), and returns
   the superclasses (for a class), the superproperties (for a property), or the classes (for an individual).
   (NB for obtaining all parents, independently of the ontology they are asserted in, use entity.is_a).
 * .get_instances_of(Class) returns the individuals that are asserted as belonging to the given Class in the ontology.
   (NB for obtaining all instances, independently of the ontology they are asserted in, use Class.instances()).
 * .get_children_of(entity) returns the subclasses (or subproperties) that are asserted for the given Class
   or property in the ontology.
   (NB for obtaining all children, independently of the ontology they are asserted in, use entity.subclasses()).

Here is an example:

::

   >>> inferences = get_ontology("http://test.org/onto_inferences.owl")
   >>> with inferences:
   ...     sync_reasoner()
   
   >>> inferences.get_parents_of(drug1)
   [onto.SingleActivePrincipleDrug]
   
   >>> drug1.is_a
   [onto.has_for_active_principle.only(OneOf([onto.acetaminophen])), onto.SingleActivePrincipleDrug]
   



================================================
File: doc/requirements.txt
================================================
sphinx
sphinx_rtd_theme



================================================
File: doc/restriction.rst
================================================
Class constructs, restrictions and logical operators
====================================================

Restrictions are special types of Classes in ontology.

Restrictions on a Property
--------------------------

::

   >>> from owlready2 import *
   
   >>> onto = get_ontology("http://test.org/onto.owl")
   
   >>> with onto:
   ...     class Drug(Thing):
   ...         pass
   ...     class ActivePrinciple(Thing):
   ...         pass
   ...     class has_for_active_principle(Drug >> ActivePrinciple):
   ...         pass


For example, a non-Placebo Drug is a Drug with an Active Principle:

::
   
   >>> class NonPlaceboDrug(Drug):
   ...     equivalent_to = [Drug & has_for_active_principle.some(ActivePrinciple)]

 
And a Placebo is a Drug with no Active Principle:

::

   >>> class Placebo(Drug):
   ...     equivalent_to = [Drug & Not(has_for_active_principle.some(ActivePrinciple))]

In the example above, 'has_for_active_principle.some(ActivePrinciple)' is the Class of all
objects that have at least one Active Principle.
The Not() function returns the negation (or complement) of a Class.
The & operator returns the intersection of two Classes.

Another example, an Association Drug is a Drug that associates two or more Active Principle:

::

   >>> with onto:
   ...     class DrugAssociation(Drug):
   ...         equivalent_to = [Drug & has_for_active_principle.min(2, ActivePrinciple)]

Owlready provides the following types of restrictions (they have the same names than in Protégé):

 * some : Property.some(Range_Class)
 * only : Property.only(Range_Class)
 * min : Property.min(cardinality, Range_Class)
 * max : Property.max(cardinality, Range_Class)
 * exactly : Property.exactly(cardinality, Range_Class)
 * value : Property.value(Range_Individual / Literal value)
 * has_self : Property.has_self(Boolean value)

When defining classes, restrictions can be used in class definition (i.e. 'equivalent_to ='),
but also as superclasses, using 'is_a =', as in the following example:

::

   >>> with onto:
   ...     class MyClass(Thing):
   ...         is_a = [my_property.some(Value)]
   
In addition, restrictions can be added to existing classes by adding them to .is_a or .equivalent_to,
as in the two following examples:

::

   >>> MyClass.is_a.append(my_property.some(Value))

   >>> MyClass.equivalent_to.append(my_property.some(Value))


Restrictions can be modified *in place* (Owlready2 updates the quadstore automatically), using the
following attributes: .property, .type (SOME, ONLY, MIN, MAX, EXACTLY or VALUE), .cardinality
and .value (a Class, an Individual, a class contruct or another restriction).

Finally, the Inverse(Property) construct can be used as the inverse of a given Property.


Restrictions as class properties
--------------------------------

Owlready allows to access restriction as class properties.

By default, existential restrictions (i.e. SOME restrictions and VALUES restrictions) can be accessed
as if they were class properties in Owlready. For example:

::
   
   >>> NonPlaceboDrug.has_for_active_principle
   [onto.ActivePrinciple]

These class attributes can also be modified (e.g. NonPlaceboDrug.has_for_active_principle.append(...) ).

The .class_property_type attribute of Properties allows to indicate how to handle class properties.
It is a list made of the following values:

 * "some": handle class properties as existential restrictions (i.e. SOME restrictions and VALUES restrictions).
 * "only": handle class properties as universal restrictions (i.e. ONLY restrictions).
 * "relation": handle class properties as relations (i.e. simple RDF triple, as in Linked Data).

When more than one value is specified, all the specified method are used when defining the value of the property
for a class.
 
The .class_property_type attribute corresponds to the "http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl#class_property_type"
annotation.

The set_default_class_property_type(types) global function allows to set the default type of class property used,
when no type is specified for a given property. The default value is ["some"].


Restrictions as class properties in defined classes
---------------------------------------------------

Defined classes are classes that are defined by an "equivalent to" relation, such as Placebo and NonPlaceboDrug above.

The .defined_class Boolean attribute can be used to mark a class as "defined".
It corresponds to the "http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl#defined_class" annotation.

When a class is marked as "defined", Owlready automatically generates an equivalent_to formula, taking into account
the class parents and the class properties.

The following program shows an example. It creates a drug ontology, with a Drug class and several HealthConditions.
In addition, two properties are created, for indiciations and contraindications. Here, we choose to manage indications
with SOME restrictions and contraindication with ONLY restrictions.

Then, the program creates two subclasses of Drug: Antalgic and Aspirin. Thoses subclasses are marked as defined (with
defined_class = True), and their properties are defined also.

::

   >>> onto2 = get_ontology("http://test.org/onto2.owl")
   
   >>> with onto2:
   ...     class Drug(Thing): pass
   ...     class ActivePrinciple(Thing): pass
   ...     class has_for_active_principle(Drug >> ActivePrinciple): pass
      
   ...     class HeathCondition(Thing): pass
   ...     class Pain(HeathCondition): pass
   ...     class ModeratePain(Pain): pass
   ...     class CardiacDisorder(HeathCondition): pass
   ...     class Hypertension(CardiacDisorder): pass
      
   ...     class Pregnancy(HeathCondition): pass
   ...     class Child(HeathCondition): pass
   ...     class Bleeding(HeathCondition): pass
      
   ...     class has_for_indications      (Drug >> HeathCondition): class_property_type = ["some"]
   ...     class has_for_contraindications(Drug >> HeathCondition): class_property_type = ["only"]
  
   ...     class Antalgic(Drug): 
   ...         defined_class = True
   ...         has_for_indications = [Pain]
   ...         has_for_contraindications = [Pregnancy, Child, Bleeding]
        
   ...     class Aspirin(Antalgic):
   ...         defined_class = True
   ...         has_for_indications = [ModeratePain]
   ...         has_for_contraindications = [Pregnancy, Bleeding]


Owlready automatically produces the appropriate equivalent_to formula, as we can verify:

::

   >>> print(Antalgic.equivalent_to)
   [onto.Drug
   & onto.has_for_indications.some(onto.Pain)
   & onto.has_for_contraindications.only(onto.Child | onto.Pregnancy | onto.Bleeding)]
   
   >>> print(Aspirin.equivalent_to)
   [onto.Antalgic
   & onto.has_for_indications.some(onto.ModeratePain)
   & onto.has_for_contraindications.only(onto.Pregnancy | onto.Bleeding)]


Notice that this mapping between class properties and definition is bidirectional: one can also use it to access
an existing definition as class properties. The following example illustrates that:

::

   >>> with onto2:
   ...     class Antihypertensive(Drug):
   ...         equivalent_to = [Drug
   ...                          & has_for_indications.some(Hypertension)
   ...                          &has_for_contraindications.only(Pregnancy)]
   
   >>> print(Antihypertensive.has_for_indications)
   [onto.Hypertension]
   
   >>> print(Antihypertensive.has_for_contraindications)
   [onto.Pregnancy]


   
Logical operators (intersection, union and complement)
------------------------------------------------------

Owlready provides the following operators between Classes
(normal Classes but also class constructs and restrictions):

 * '&' : And operator (intersection). For example: Class1 & Class2.
   It can also be written: And([Class1, Class2])
 * '|' : Or operator (union). For example: Class1 | Class2.
   It can also be written: Or([Class1, Class2])
 * Not() : Not operator (negation or complement). For example: Not(Class1)

The Classes used with logical operators can be normal Classes (inheriting from Thing), restrictions or
other logical operators. 

Intersections, unions and complements can be modified *in place* using
the .Classes (intersections and unions) or .Class (complement) attributes.


One-Of constructs
-----------------

In ontologies, a 'One Of' statement is used for defining a Class by extension, *i.e.* by listing its Instances
rather than by defining its properties.

::
   
   >>> with onto:
   ...     class DrugForm(Thing):
   ...         pass
   
   >>> tablet     = DrugForm()
   >>> capsule    = DrugForm()
   >>> injectable = DrugForm()
   >>> pomade     = DrugForm()
   
   # Assert that there is only four possible drug forms
   >>> DrugForm.is_a.append(OneOf([tablet, capsule, injectable, pomade]))
   
The construct be modified *in place* using the .instances attribute.


Inverse-of constructs
---------------------

Inverse-of constructs produces the inverse of a property, without creating a new property.

::
   
   Inverse(has_for_active_principle)
   
The construct be modified *in place* using the .property attribute.


ConstrainedDatatype
-------------------

A constrained datatype is a data whose value is restricted, for example an integer between 0 and 20.

The global function ConstrainedDatatype() create a constrained datatype from a base datatype,
and one or more facets:

* length
* min_length
* max_length
* pattern
* white_space
* max_inclusive
* max_exclusive
* min_inclusive
* min_exclusive
* total_digits
* fraction_digits

For example:

::

   ConstrainedDatatype(int, min_inclusive = 0, max_inclusive = 20)
   ConstrainedDatatype(str, max_length = 100)
  

Property chain
--------------

Property chain allows to chain two properties (this is sometimes noted prop1 o prop2).
The PropertyChain() function allows to create a new property chain from a list of properties:

::
   
   PropertyChain([prop1, prop2])
   
The construct be modified *in place* using the .properties attribute.




================================================
File: doc/rule.rst
================================================
SWRL rules
==========

SWRL rules can be used to integrate 'if... then...' rules in ontologies.

Note: loading SWRL rules is **only** supported from RDF/XML and NTriples files, but not from OWL/XML files.


Creating SWRL rules
-------------------

The Imp class ("Implies") represent a rule. The easiest way to create a rule is to define it
using a Protégé-like syntax, with the .set_as_rule() method.

The following example use a rule to compute the per-tablet cost of a drug:

::
   
   >>> onto = get_ontology("http://test.org/drug.owl")
   
   >>> with onto:
   ...     class Drug(Thing): pass
   ...     class number_of_tablets(Drug >> int, FunctionalProperty): pass
   ...     class price(Drug >> float, FunctionalProperty): pass
   ...     class price_per_tablet(Drug >> float, FunctionalProperty): pass
   ...
   ...     rule = Imp()
   ...     rule.set_as_rule("""Drug(?d), price(?d, ?p), number_of_tablets(?d, ?n), divide(?r, ?p, ?n) -> price_per_tablet(?d, ?r)""")

   
We can now create a drug, run the reasoner (only Pellet support inferrence on data property value)
and print the result:
::
   
   >>> drug = Drug(number_of_tablets = 10, price = 25.0)
   >>> sync_reasoner_pellet(infer_property_values = True, infer_data_property_values = True)
   >>> drug.price_per_tablet
   2.5


Displaying rules
----------------

The str() Python function can be used to format rules, for example:

::

   >>> str(rule)
   'Drug(?d), price(?d, ?p), number_of_tablets(?d, ?n), divide(?r, ?p, ?n) -> price_per_tablet(?d, ?r)'


   
Modifying rules manually
------------------------

Owlready also allows to access to the inner content of rules. Each rules have a body (= conditions)
and head (= consequences) :

::
   
   >>> rule.body
   [Drug(?d), price(?d, ?p), number_of_tablets(?d, ?n), divide(?r, ?p, ?n)]
   >>> rule.head
   [price_per_tablet(?d, ?r)]

   
Body and head are list of SWRL atoms. The attributes of each atom can be read and modified:

::

   >>> rule.body[0]
   Drug(?d)
   >>> rule.body[0].class_predicate
   drug.Drug
   >>> rule.body[0].arguments
   [?d]

Please refer to SWRL documentation for the list of atoms and their description. One notable difference is that
Owlready always use the "arguments" attributes for accessing arguments, while SWRL uses sometimes "arguments"
and sometimes "argument1" and "argument2".



================================================
File: doc/sparql.rst
================================================
SPARQL queries
==============

Since version 0.30, Owlready proposes 2 methods for performing SPARQL queries: the native SPARQL engine and RDFlib.


Native SPARQL engine
********************

The native SPARQL engine automatically translates SPARQL queries into SQL queries, and then run the SQL queries with SQLite3.

The native SPARQL engine has better performances than RDFlib (about 60 times faster when tested on Gene Ontology,
but it highly depends on queries and data). It also has no dependencies and it has a much shorter start-up time.

However, it currently supports only a subset of SPARQL.


SPARQL elements supported
-------------------------

* SELECT, INSERT and DELETE queries
* UNION
* OPTIONAL
* FILTER, BIND, FILTER EXISTS, FILTER NOT EXISTS
* GRAPH clauses
* SELECT sub queries
* VALUES in SELECT queries
* All SPARQL functions and aggregation functions
* Blank nodes notations with square bracket, e.g. '[ a XXX]'
* Parameters in queries (i.e. '??' or '??1')
* Property path expressions, e.g. 'a/rdfs:subClassOf*',  excepted those listed below

SPARQL elements not supported
-----------------------------

* ASK, DESCRIBE, LOAD, ADD, MOVE, COPY, CLEAR, DROP, CONSTRUCT queries
* INSERT DATA, DELETE DATA, DELETE WHERE queries (you may use INSERT or DELETE instead)
* SERVICE (Federated queries)
* FROM, FROM NAMED keywords
* MINUS
* Property path expressions with parentheses of the following forms:

  - nested repeats, e.g. (a/p*)*
  - sequence nested inside a repeat, e.g. (p1/p2)*
  - negative property set nested inside a repeat, e.g. (!(p1 | p2))*

  i.e. repeats cannot contain other repeats, sequences and negative property sets.


Performing SPARQL queries
-------------------------

The .sparql() methods of the World object can be used to perform a SPARQL query and obtain the results.
Notice that .sparql() returns a generator, so we used here the list() function to show the results.
The list contains one row for each result found, with one or more columns (depending on the query).

::
   
   >>> # Loads Gene Ontology (~ 170 Mb), can take a moment!
   >>> go = get_ontology("http://purl.obolibrary.org/obo/go.owl").load()
   
   >>> # Get the number of OWL Class in GO
   >>> list(default_world.sparql("""
              SELECT (COUNT(?x) AS ?nb)
              { ?x a owl:Class . }
       """))
   [[60448]]


Notice that the following prefixes are automatically pre-defined:

*  rdf: -> http://www.w3.org/1999/02/22-rdf-syntax-ns#
*  rdfs: -> http://www.w3.org/2000/01/rdf-schema#
*  owl: -> http://www.w3.org/2002/07/owl#
*  xsd: -> http://www.w3.org/2001/XMLSchema#
*  obo: -> http://purl.obolibrary.org/obo/
*  owlready: -> http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl#

In addition, Owlready automatically create prefixes from the last part of ontology IRI (without .owl extension),
e.g. the ontology "http://test.org/onto.owl" with be automatically associated with the "onto:" prefix.
Consequently, in most case you don't need to define prefixes (but you can still define them if you want).

The classes counted above include OWL named classes, but also some OWL constructs. One may count only named classes
using a FILTER condition and the ISIRI function, as follows:

::
   
   >>> # Get the number of OWL Class in GO
   >>> list(default_world.sparql("""
              SELECT (COUNT(?x) AS ?nb)
              { ?x a owl:Class . FILTER(ISIRI(?x)) }
       """))
   [[48535]]


We may also search for a given concept. When a query returns an entity, it returns it as an Owlready object.

::
   
   >>> # Get the "mitochondrion inheritance" concept from GO
   >>> r = list(default_world.sparql("""
              SELECT ?x
              { ?x rdfs:label "mitochondrion inheritance" . }
       """))
   >>> r
   [[obo.GO_0000001]]
   >>> mito_inher = r[0][0]

Here, the resulting object 'mito_inher' is an Owlready object (here, a Class) that can be used as any other classes in Owlready.

Owlready support simple property path expressions, such as 'rdfs:subClassOf*' or 'a/rdfs:subClassOf*'.
For example, we can get the superclasses of "mitochondrion inheritance" as follows:

::
   
   >>> list(default_world.sparql("""
              SELECT ?y
              { ?x rdfs:label "mitochondrion inheritance" .
                ?x rdfs:subClassOf* ?y }
       """))
   [[obo.GO_0000001], [obo.GO_0048308], [obo.GO_0048311], [obo.GO_0006996], [obo.GO_0007005], [obo.GO_0051646], [obo.GO_0016043], [obo.GO_0051640], [obo.GO_0009987], [obo.GO_0071840], [obo.GO_0051641], [obo.GO_0008150], [obo.GO_0051179]]

 
Or we can search for individuals belonging to the class "mitochondrion inheritance" or one of its descendants, as follows:

::
   
   >>> list(default_world.sparql("""
              SELECT ?y
              { ?x rdfs:label "mitochondrion inheritance" .
                ?y a/rdfs:subClassOf* ?x }
       """))
   []
   
(Here, we have no results because Gene Ontology does not include individuals).



INSERT queries
--------------

The ontology in which the new RDF triples are inserted can be given using a "with ontology:" block or
using the "WITH <ontology IRI> INSERT ..." syntax in SPARQL. If both are present, the "with ontology:" block takes priority.

::
   
   >>> insertion = get_ontology("http://test.org/insertion.owl")
   >>> with insertion:
   ...     default_world.sparql("""
              INSERT { ?x rdfs:label "héritage mitochondrial"@fr }
              WHERE  { ?x rdfs:label "mitochondrion inheritance" . }
              """)
   1

INSERT / DELETE queries returns the number of matches found by the WHERE part.

When running INSERT / DELETE queries, Owlready tries to update the Python objects corresponding to the modified entities,
if they were loaded from the quadstore.

The following example shows how to create new individuals with an INSERT query. It creates an individual for each subclass
of "membrane".

::
   
   >>> insertion = get_ontology("http://test.org/insertion.owl")
   >>> with insertion:
   ...     default_world.sparql("""
              INSERT { ?n rdfs:label "New individual!" . }
              WHERE  { ?x rdfs:label "membrane" .
                       ?y rdfs:subClassOf ?x .
                       BIND(NEWINSTANCEIRI(?y) AS ?n) }
              """)
   

We use here a BIND statement in order to create a new IRI, using the NEWINSTANCEIRI() function that create a new IRI for
an individual, similar to those created automatically by Owlready. You may also use the more standard UUID() SPARQL function,
which create a random arbitrary IRI.

The following example shows how to create OWL construct like restrictions with an INSERT query.

::
   
   >>> insertion = get_ontology("http://test.org/insertion.owl")
   >>> with insertion:
   ...     default_world.sparql("""
              INSERT { ?x rdfs:subClassOf [ a owl:Restriction ;
                                            owl:onProperty obo:BFO_0000050 ;
                                            owl:someValuesFrom obo:GO_0005623 ] . }
              WHERE  { ?x rdfs:label "membrane" . }
              """)
   1
   
   >>> obo.GO_0016020.label
   ['membrane']
   >>> obo.GO_0016020.is_a
   [obo.GO_0044464, obo.BFO_0000050.some(obo.GO_0005623)]

   

DELETE queries
--------------

DELETE queries are supported; they do not need to specify the ontology from which RDF triples are deleted.

::
   
   >>> default_world.sparql("""
           DELETE { ?r ?p ?o . }
           WHERE  {
               ?x rdfs:label "membrane" .
               ?x rdfs:subClassOf ?r .
               ?r a owl:Restriction .
               ?r ?p ?o .
           }
           """)

The native SPARQL engine supports queries with both a DELETE and an INSERT statement.


Parameters in SPARQL queries
----------------------------

Parameters allow to run the same query multiple times, with different parameter values.
They have two interests. First, they increase performances since the same query can be reused, thus avoiding to
parse new queries. Second, they prevent security problems by avoiding SPARQL code injection, e.g. if a string value includes
quotation marks.

Parameters can be included in the query by using double question marks, e.g. "??". Parameter values can be Owlready entities
or datatype values (int, float, string, etc.). Parameter values are passed in a list after the query:

::
   
   >>> list(default_world.sparql("""
              SELECT ?y
              { ?? rdfs:subClassOf* ?y }
       """, [mito_inher]))
   [[obo.GO_0000001], [obo.GO_0048308], [obo.GO_0048311],
    [obo.GO_0006996], [obo.GO_0007005], [obo.GO_0051646],
    [obo.GO_0016043], [obo.GO_0051640], [obo.GO_0009987],
    [obo.GO_0071840], [obo.GO_0051641], [obo.GO_0008150],
    [obo.GO_0051179]]


Parameters can also be numbered, e.g. "??1", "??2", etc. This is particularly usefull if the same parameter is used
multiple times in the query.

::
   
   >>> list(default_world.sparql("""
              SELECT ?y
              { ??1 rdfs:subClassOf* ?y }
       """, [mito_inher]))
   [[obo.GO_0000001], [obo.GO_0048308], [obo.GO_0048311],
    [obo.GO_0006996], [obo.GO_0007005], [obo.GO_0051646],
    [obo.GO_0016043], [obo.GO_0051640], [obo.GO_0009987],
    [obo.GO_0071840], [obo.GO_0051641], [obo.GO_0008150],
    [obo.GO_0051179]]


Non-standard additions to SPARQL
--------------------------------

The following functions are supported by Owlready, but not standard:

 * The SIMPLEREPLACE(a, b) function is a version of REPLACE() that does not support Regex. It works like Python or SQLite3 replace,
   and has better performances.
   
 * THE LIKE(a, b) function performs similarly to the SQL Like operator. It is more limited, but faster than the Regex SPARQL functions.
   
 * The NEWINSTANCEIRI() function create a new IRI for an instance of the class given as argument. This IRI is similar to those
   created by default by Owlready. Note that the function creates 2 RDF triples, asserting that the new individual is an
   OWL NamedIndividual and an instance of the desired class passed as argument.

 * The LOADED(iri) function returns True if the entity with the given IRI is currently loaded in Python, and False otherwise.

 * The STORID(iri) function returns the integer Store-ID used by Owlready in the quadstore for representing the entity.

 * The DATE(), TIME() and DATETIME() functions can be used to handle date and time. They behave as in SQLite3 (see https://www.sqlite.org/lang_datefunc.html).

 * The DATE_SUB(), DATE_ADD(), DATETIME_SUB and DATETIME_ADD() functions can be used to substract or add a time duration to a date or a datetime, for example : DATETIME_ADD(NOW(), "P1Y"^^xsd:duration)

In Owlready, INSERT and DELETE queries can have a GROUP BY, HAVING and/or ORDER BY clauses.
This is normally not allowed by the SPARQL specification.


Prepare SPARQL queries
----------------------

The .prepare_sparql() method of the World object can be used to prepare a SPARQL query. It returns a PreparedQuery object.

The .execute() method of the PreparedQuery can be used to execute the query. It takes as argument the list of parameters,
if any.

.. note::
   
   The .sparql() method calls .prepare_sparql(). Thus, there is no interest, in terms of performances, to use
   .prepare_sparql() instead of .sparql().

The PreparedQuery can be used to determine the type of query:

::

   >>> query = default_world.prepare_sparql("""SELECT (COUNT(?x) AS ?nb) { ?x a owl:Class . }""")
   >>> isinstance(query, owlready2.sparql.main.PreparedSelectQuery)
   True
   >>> isinstance(query, owlready2.sparql.main.PreparedModifyQuery) # INSERT and/or DELETE
   False

The following attributes are availble on the PreparedQuery object:

 * .nb_parameter: the number of parameters
 * .column_names: a list with the names of the columns in the query results, e.g. ["?nb"] in the example above.
 * .world: the world object for which the query has been prepared
 * .sql: the SQL translation of the SPARQL query

::

   >>> query.sql
   'SELECT  COUNT(q1.s), 43 FROM objs q1 WHERE q1.p=6 AND q1.o=11'
   
.. note::
   
   For INSERT and DELETE query, the .sql translation only involves the WHERE part. Insertions and deletions are
   performed in Python, not in SQL, in order to update the modified Owlready Python objects, if needed.


Open a SPARQL endpoint
----------------------

The owlready2.sparql.endpoint module can be used to open a SPARQL endpoint. It requires Flask or WSGI. It contains the EndPoint
class, that takes a World and can be used as a Flask page function.

The following script creates a SPARQL endpoint with Flask:

::
   
   import flask
   
   from owlready2 import *
   from owlready2.sparql.endpoint import *

   # Load one or more ontologies
   go = get_ontology("http://purl.obolibrary.org/obo/go.owl").load() # (~ 170 Mb), can take a moment!
   
   app = flask.Flask("Owlready_sparql_endpoint")
   endpoint = EndPoint(default_world)
   app.route("/sparql", methods = ["GET"])(endpoint)
   
   # Run the server with Werkzeug; you may use any other WSGI-compatible server
   import werkzeug.serving
   werkzeug.serving.run_simple("localhost", 5000, app)


And the following script does the same, but with WSGI:

::
   
   from owlready2 import *
   from owlready2.sparql.endpoint import *

   # Load one or more ontologies
   go = get_ontology("http://purl.obolibrary.org/obo/go.owl").load() # (~ 170 Mb), can take a moment!
   
   endpoint = EndPoint(default_world)
   app = endpoint.wsgi_app
   
   # Run the server with Werkzeug; you may use any other WSGI-compatible server
   import werkzeug.serving
   werkzeug.serving.run_simple("localhost", 5000, app)

   
You can then query the endpoint, e.g. by opening the following URL in your browser:

   `<http://localhost:5000/sparql?query=SELECT(COUNT(?x)AS%20?nb){?x%20a%20owl:Class.}>`_


Using RDFlib for executing SPARQL queries
*****************************************

The Owlready quadstore can be accessed as an RDFlib graph, which can be used to perform SPARQL queries:

::

   >>> graph = default_world.as_rdflib_graph()
   >>> r = list(graph.query("""SELECT ?p WHERE {
     <http://www.semanticweb.org/jiba/ontologies/2017/0/test#ma_pizza> <http://www.semanticweb.org/jiba/ontologies/2017/0/test#price> ?p .
   }"""))


The results can be automatically converted to Python and Owlready using the .query_owlready() method instead of .query():

::

   >>> r = list(graph.query_owlready("""SELECT ?p WHERE {
     <http://www.semanticweb.org/jiba/ontologies/2017/0/test#ma_pizza> <http://www.semanticweb.org/jiba/ontologies/2017/0/test#price> ?p .
   }"""))




================================================
File: doc/sync.rst
================================================
Parallelism, multiprocessing and synchronization
================================================

Parallelism consist in executing several part of your program in parallel.
Three options are possible:

 * **cooperative microthread (e.g. greenlets with GEvent):** it allows running several "greenlet" in parallel,
   switching from one to others, but it does not actually run several commands in parallel and increase performances.
   Nevertheless, it is very interesting in a server setting: 
 * **multi-thread parallelism:** it allows sharing data and objects between threads, however,
   Python has poor multithreading supports (due to the global interpreter lock (GIL), only one thread at a time may execute Python commands).
 * **multi-process parallelism:** it allows executing Python commands in parallel,
   however, data sharing is more difficult and objects cannot be shared between processes. In addition, keep in mind that
   Owlready does not update the local Python objects from the quadstore if they are modified by other processes.
   
Owlready (>= 0.41) supports all options:

 * cooperative microthread can be used in a server setting, in order to let the server answer a simple/small request while a long request is running.
 * multi-thread parallelism can be used to parallelize sets of long SPARQL queries (only the SQL query is parallelized, allowing to run Python commands meanwhile). There is no other interesting in multi-threading, due to Python's GIL.
 * multi-process parallelism can be used to run several processes in parallel.
 * cooperative microthread and multi-process parallelism can also be combined together.

Two difficulties arise when using parallelism:

* Sharing data between processes is complex. When using Owlready, the easier solution is to put the quadstore
  with the ontology data on disk. This does not apply to cooperative microthreads and threads.
* Sensible parts of the code must be synchronized, e.g. one should avoid that several threads or processes write in the quadstore
  at the same time.

Several web application servers use multiple processes, and thus you will also encounter these difficulties when using them.
For both microthreads and/or multiple processes, I recommend the `Gunicorn <https://gunicorn.org/>`_ web server.


Parallelized file parsing
-------------------------

For huge OWL file (> 8 Mb), Owlready (>= 0.41) automatically uses a separate process for parsing the file
(the main process being in charge of inserting triples in the quadstore). This provide a 25% performance boost
on huge ontologies.


Thread-based parallel execution of SPARQL queries
-------------------------------------------------

This is the simplest option, and probably the best if you have lots of long SPARQL queries.
Since version 0.41, Owlready supports some level of thread-based parallelization, for increasing performances
by executing several SPARQL queries in parallel. It does not require to care about synchronization or data sharing.

In order to use this feature, you first need to use a World stored on disk in a local file,
to deactive exclusive mode and to activate thread parallelism support, as follows:

::
   
   >>> default_world.set_backend(filename  = "my_quadstore.sqlite3",
                                 exclusive = False,
                                 enable_thread_parallelism = True)

When thread parallelism is activated, Owlready opens 3 additional connexions to the SQLite3 database storing the quadstore,
allowing 3 parallel threads.

Then, the quadstore must be saved on disk before running parallel queries, as follows:

::
   
   >>> default_world.save()
   

Executing many SPARQL queries in parallel
.........................................

The owlready2.sparql.execute_many() function can be used to execute several prepared SPARQL queries in parallel.
Both SELECT and INSERT/DELETE queries are supported.

execute_many() will start 3 threads for executing the queries in parallel, and returns a list of query results.

You may expect up to 100% performance boost, especially when the queries are long and complex
and the number of results is small (currently, Owlready only parallelize the SQL execution,
but not the loading of the resulting objects from the quadstore).

Here is a typical usage:

::

   >>> my_onto = get_ontology("XXX ontology IRI here")
   
   >>> queries = [
   ...     default_world.prepare_sparql("""XXX First SPARQL query here"""),
   ...     ...,
   ... ]
   
   >>> queries_params = [
   ...     [], # First SPARQL query parameters
   ...     ...,
   ... ]
   
   >>> import owlready2.sparql
   >>> results = [list(gen) for gen in owlready2.sparql.execute_many(my_onto, queries, queries_params)]

If you are also using cooperative microthreads with Gevent, you may use the Gevent thread pool.
This can be done by providing a "spawn" function to execute_many(). The spawn function must accept a
callable with no argument, start a thread executing that callable, and return the thread object (which is expected to have
a .join() method). Here is an example for Gevent:

::

   >>> import gevent.hub
   >>> gevent_spawn = gevent.hub.get_hub().threadpool.apply_async
   >>> results = [list(gen) for gen in owlready2.sparql.execute_many(my_onto, queries, queries_params, gevent_spawn)]


Executing a single SPARQL query in parallel
...........................................

A single SPARQL query can be executed in parallel, in a separate thread. The query will not run faster (it will rather takes
a little more time), but the main thread will be let available for other tasks. This can be interesting e.g. on a server,
where a long query can be parallelized; meanwhile, the main thread may answer to other clients.

::
   
   >>> query = default_world.prepare_sparql("""XXX SPARQL query here""")
   >>> query.execute(spawn = True)


Similarly, you may want to use the Gevent thread pool, as follows:

::

   >>> import gevent.hub
   >>> gevent_spawn = gevent.hub.get_hub().threadpool.apply_async
   >>> query.execute(spawn = gevent_spawn)


Cooperative microthreads (e.g. GEvent)
--------------------------------------

Microthreads will not improve the performances of Owlready, however, they will allow running several tasks in parallel,
which is interesting if you need to perform small tasks during long tasks (e.g. in a server), or if some part of your
program is waiting on an external, non-Python, task (e.g. a network call, including the use of a server database
like Postgresql).

Synchronization
...............

For using Owlready with cooperative microthreads, you need to:

* Use a custom lock for the quadstore. By default, Owlready use the internal SQLite3 database as a lock; this does not
  work with microthreads because all microthreads share the same SQLite3 connexion. The solution is to use a custom lock,
  for example with GEvent :
  
  ::
     
     >>> gevent.lock
     >>> default_world.set_backend(filename = "your_quadstore.sqlite3",
     ...                           lock     = gevent.lock.RLock())
     
* Perform each modification to an ontology inside a "with ontology:" block.
  This prevents multiple writes at the same time.
  For improving performances, you should also avoid long computation inside "with ontology:" blocks.
  
* Switch to other microthreads when desired (by calling gevent.sleep(0)).
  To let other microthreads write in the quadstore, you should do that outside "with ontology:" blocks.
  
Other synchronization tasks (listed below, for multiprocessing) are not needed for microthreads.


Multiprocessing
---------------

Multiprocessing requires synchronization, which can be very complex (and may have a significant performance cost).

Multiprocessing is recommended when using a read-only quadstore, because Owlready does not update the local
Python objects from the quadstore if they are modified by another process.

Owlready does not update the local Python objects from the quadstore when they are modified by another process.
Consequently, multiprocessing is recommended when using a read-only quadstore, or when the data can be split between
processes. For example, in a medical application, each process might be in charge of a sub-set of the patients.


Synchronization
...............

For using Owlready with multiple processes, and sharing the quadstore between processes, you need to:

* Store the quadstore on disk, and open the quadstore in non-exclusive mode (exclusive = False in set_backend()).
  For example:

  ::
     
     >>> default_world.set_backend(filename  = "your_quadstore.sqlite3",
     ...                           exclusive = False)
       
* Perform each modification to an ontology inside a "with ontology:" block. Owlready maintain a lock for each
  quadstore, which prevents multiple writes at the same time.
  Thus, for improving performances, you should also avoid long computation inside "with ontology:" blocks.
* You may also use "with world:" blocks to synchronize on the quadstore, but without specifying a particular ontology.
* Call World.save() at the end of each "with ontology:" block, in order to commit the changes to the quadstore database.
* If an individual may have been modified by another process, you can use the .reload() method to force reloading its
  property values:

  ::
     
     >>> individual.reload()


Server example
..............

This section gives a small example of a multi-process server using a shared Owlready quadstore.

The example uses `Flask <https://flask.palletsprojects.com/>`_ and `Gunicorn <https://gunicorn.org/>`_.
It provides 2 URL: the first one (/gen) creates 5 new instances of the C class. The second (/test) returns the ID
of the current process and the number of instances in the quadstore.

::

   import sys, os, flask, time
   from owlready2 import *
   
   default_world.set_backend(filename = "/tmp/t.sqlite3", exclusive = False)
   
   onto = get_ontology("http://test.org/onto.owl")
   
   with onto:
     class C(Thing): pass
     default_world.save()
     
   
   app = flask.Flask("OwlreadyBench")
   
   @app.route("/gen")
   def gen():
     with onto:
       for i in range(5):
         c = C()
         c.label = [os.getpid()]
         print(c, c.storid)
       default_world.save()
     return ""
   
   @app.route("/test")
   def test():
     time.sleep(0.02)
     nb = len(list(C.instances()))
     return "%s %s" % (os.getpid(), nb)

You can run this server in multiprocessor mode with Gunicorn as follows:

::

   gunicorn -b 127.0.0.1:5000 --preload -w 5 --worker-class=gevent test:app

where "test" is the previous file's name (without ".py"),
and 5 in "-w 5" is recommended to be the number of CPU plus 1 (here, my computer has 4 CPU, thus -w 5).

Then, after running the server, you can use the following script to make 100 concurrent calls to /gen, and then
10 concurrent calls to /test:

::
   
   from urllib.request import *
   
   import eventlet, eventlet.green.urllib.request
   def fetch(url): return eventlet.green.urllib.request.urlopen(url).read()
   
   urls = ["http://localhost:5000/gen"] * 100
   pool = eventlet.GreenPool()
   for body in pool.imap(fetch, urls): pass
   
   urls = ["http://localhost:5000/test"] * 10
   pool = eventlet.GreenPool()
   for body in pool.imap(fetch, urls): print(body)

As the 10 calls to /test are executed by different processes, this allows to verify that the various processes have access
to all the created instances (normally, 500 instances).

The previous server example can also be run with `uWSGI <https://uwsgi-docs.readthedocs.io/en/latest/>`_ as follows:

::

   uwsgi --http 127.0.0.1:5000 --plugin python -p 5 --module test:app



Combining multiprocessing with cooperative microthreads
-------------------------------------------------------

Owlready (>= 0.46) can combine together both multiprocessing and cooperative microthreads.
This is interesting if you need microthreads (e.g. because you are using WebSockets) and you want to take advantage of
multiprocessing for improving performances.

For that, you need to store the quadstore on disk, and to open it with the "exclusive = False" and "extra_lock" arguments,
which use the given lock in addition to the SQLite lock (while the lock argument uses it instead of):

::
   
   >>> gevent.lock
   >>> default_world.set_backend(filename   = "your_quadstore.sqlite3",
   ...                           exclusive  = False,
   ...                           extra_lock = gevent.lock.RLock())

You need to follow the synchronization rules for both microthreads and processes, as explained above.




================================================
File: doc/world.rst
================================================
Worlds
======

Owlready2 stores every triples in a 'World' object, and it can handles several Worlds
in parallel. 'default_world' is the World used by default.


Persistent world: storing the quadstore in an SQLite3 file database
-------------------------------------------------------------------

Owlready2 uses an optimized quadstore. By default, the quadstore is stored in memory, but it can also be
stored in an SQLite3 file. This allows persistance: all ontologies loaded and created are stored in the file,
and can be reused later.
This is interesting for big ontologies: loading huge ontologies can take time, while opening the SQLite3 file
takes only a fraction of second, even for big files.
It also avoid to load huge ontologies in memory, if you only need to access a few
entities from these ontologies.

The .set_backend() method of World sets the SQLite3 filename associated to the quadstore,
for example:

::

   >>> default_world.set_backend(filename = "/path/to/your/file.sqlite3")

.. note::
   
   If the quad store is not empty when calling .set_backend(), RDF triples are automatically copied.
   However, this operation can have a high performance cost (especially if there are many triples).


When using persistence, the .save() method of World must be called for saving the actual
state of the quadstore in the SQLite3 file:

::

   >>> default_world.save()

Storing the quadstore in a file does not reduce the performance of Owlready2 (actually,
it seems that Owlready2 performs a little *faster* when storing the quadstore on the disk).

To reload an ontology stored in the quadstore (when the corresponding OWL file has been updated),
the reload and reload_if_newer optional parameters of .load() can be used (the former reload the ontology,
and the latter reload it only if the OWL file is more recent).

By default, Owlready2 opens the SQLite3 database in exclusive mode. This mode is faster, but it does not allow
several programs to use the same database simultaneously. If you need to have several Python programs that
access simultaneously the same Owlready2 quadstore, you can disable the exclusive mode as follows:

::

   >>> default_world.set_backend(filename = "/path/to/your/file.sqlite3", exclusive = False)



Using several isolated Worlds
-----------------------------

Owlready2 can support several, isolated, Worlds.
This is interesting if you want to load several version
of the same ontology, for example before and after reasoning.

A new World can be created using the World class:

::

   >>> my_world = World()
   >>> my_second_world = World(filename = "/path/to/quadstore.sqlite3")

Ontologies are then created and loaded using the .get_ontology() methods of the World
(when working with several Worlds, this method replaces the get_ontology() global function):

::

   >>> onto = my_world.get_ontology("http://test.org/onto/").load()

The World object can be used as a pseudo-dictionary for accessing entities using their IRI.
(when working with several Worlds, this method replaces the IRIS global pseudo-dictionary):
   
::

   >>> my_world["http://test.org/onto/my_iri"]

Finally, the reasoner can be executed on a specific World:
   
::

   >>> sync_reasoner(my_world)


Working with RDFlib
-------------------

Owlready2 uses an optimized RDF quadstore. This quadstore can also be accessed
as an RDFlib graph as follows:

::

   >>> graph = default_world.as_rdflib_graph()


In particular, the RDFlib graph can be used for performing SPARQL queries:

::

   >>> r = list(graph.query("""SELECT ?p WHERE {
     <http://www.semanticweb.org/jiba/ontologies/2017/0/test#ma_pizza> <http://www.semanticweb.org/jiba/ontologies/2017/0/test#price> ?p .
   }"""))




The results can be automatically converted to Python and Owlready using the .query_owlready() method instead of .query():

::

   >>> r = list(graph.query_owlready("""SELECT ?p WHERE {
     <http://www.semanticweb.org/jiba/ontologies/2017/0/test#ma_pizza> <http://www.semanticweb.org/jiba/ontologies/2017/0/test#price> ?p .
   }"""))


.. note::
   
   Owlready now include its own SPARQL engine, documented here: :doc:`sparql`.

Owlready blank nodes can be created with the graph.BNode() method:

::

   >>> bn = graph.BNode()
   >>> with onto:
   ...     graph.add((bn, rdflib.URIRef("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), rdflib.URIRef("http://www.w3.org/2002/07/owl#Class"))) 



